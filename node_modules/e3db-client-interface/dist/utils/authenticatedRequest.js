"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

require("isomorphic-fetch");

var _v = _interopRequireDefault(require("uuid/v4"));

var _ = require(".");

var _config = _interopRequireDefault(require("../storage/config"));

/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2017.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2017 Tozny, LLC (https://tozny.com)
 */

/* global fetch */
var supportedTSV1Algorithms = ['TSV1-ED25519-BLAKE2B'];

function sortQueryParams(queryString) {
  // Parse query string into field=values
  var query = queryString.split('&');

  for (var i = 0; i < query.length; i++) {
    // Separate fields from values
    var splitQuery = query[i].split('=');
    query[i] = splitQuery;
  } // Sort alphabetically


  query.sort(function (a, b) {
    return a[0] < b[0] ? -1 : 1;
  }); // Reconstruct query

  for (var j = 0; j < query.length; j++) {
    query[j] = query[j].join('=');
  }

  return query.join('&');
}

var AuthenticatedRequest =
/*#__PURE__*/
function () {
  function AuthenticatedRequest(config, crypto) {
    (0, _classCallCheck2["default"])(this, AuthenticatedRequest);
    // Ensure a valid crypto object
    (0, _.checkCrypto)(crypto); // Ensure a valid config object

    (0, _.checkConfig)(config); // Populate object values

    this.config = config;
    this.crypto = crypto;
    this._authToken = null;
    this._authTokenTimeout = 0; // Minimum UNIX timestamp
  }
  /**
   * Wrapper method to generate the Authentication header through tsv1 if possible, but defaults to oauth if tsv1 is missing signing keys
   * Throws if both methods of authentication are not possible
   *
   * @param {string} urlString Absolute URL to fetch from the server
   * @param {object} options Object representing additional settings for the fetch
   *
   * @returns {Promise<string>} Promise of a valid authentication header
   */


  (0, _createClass2["default"])(AuthenticatedRequest, [{
    key: "authenticateHeader",
    value: function () {
      var _authenticateHeader = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(urlString, options, userId) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.canPerformTSV1Auth(urlString, options)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this.tsv1Auth(urlString, options, userId));

              case 2:
                if (!this.canPerformTokenAuth()) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", this.tokenAuth());

              case 4:
                throw new Error('This client is missing the keys to perform any supported authentication method');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function authenticateHeader(_x3, _x4, _x5) {
        return _authenticateHeader.apply(this, arguments);
      }

      return authenticateHeader;
    }()
  }, {
    key: "canPerformTSV1Auth",
    value: function canPerformTSV1Auth(urlString, options) {
      return this.config.publicSigningKey !== undefined && this.config.privateSigningKey !== undefined && urlString !== undefined && options !== undefined;
    }
    /**
     * Wrapper method to generate the Authentication header using tsv1
     * Throws if tsv1 is missing needed signing keys or url options
     *
     * @param {string} urlString Absolute URL to fetch from the server
     * @param {object} options Object representing additional settings for the fetch
     *
     * @returns {Promise<string>} Promise of a valid authentication header
     */

  }, {
    key: "getTSV1Header",
    value: function () {
      var _getTSV1Header = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(urlString, options) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.canPerformTSV1Auth(urlString, options)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", this.tsv1Auth(urlString, options));

              case 2:
                throw new Error('Missing public or private signing key');

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getTSV1Header(_x6, _x7) {
        return _getTSV1Header.apply(this, arguments);
      }

      return getTSV1Header;
    }()
    /**
     * Generates and a signed request header according to the tsv1 specifications
     *
     * @returns {Promise<string>} Promise of a valid authentication header
     */

  }, {
    key: "tsv1Auth",
    value: function () {
      var _tsv1Auth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(urlString, options) {
        var url, path, queryString, timestamp, authMethod, nonce, userId, headerString, strToSign, hashToSign, fullSignature, authHeader;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Currently requires trailing slash
                url = new URL(urlString);
                path = url.pathname;
                queryString = url.search.substr(1);
                queryString = sortQueryParams(queryString);
                timestamp = Date.now() / 1000 | 0; // Only one sodium cipher is currently supported.

                authMethod = supportedTSV1Algorithms[0];
                nonce = (0, _v["default"])();
                userId = this.config.clientId || '';
                headerString = "".concat(authMethod, "; ").concat(this.config.publicSigningKey, "; ").concat(timestamp, "; ").concat(nonce, "; uid:").concat(userId);
                strToSign = "".concat(path, "; ").concat(queryString, "; ").concat(options.method, "; ").concat(headerString);
                _context3.next = 12;
                return this.crypto.genericHash(strToSign);

              case 12:
                hashToSign = _context3.sent;
                _context3.next = 15;
                return this.crypto.signDetached(hashToSign, this.config.privateSigningKey);

              case 15:
                fullSignature = _context3.sent;
                authHeader = "".concat(headerString, "; ").concat(fullSignature);
                return _context3.abrupt("return", authHeader);

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function tsv1Auth(_x8, _x9) {
        return _tsv1Auth.apply(this, arguments);
      }

      return tsv1Auth;
    }()
  }, {
    key: "canPerformTokenAuth",
    value: function canPerformTokenAuth() {
      return this.config.apiKeyId !== undefined && this.config.apiSecret !== undefined;
    }
    /**
     * Wrapper method to cache and generate the Authentication header using oAuth
     * Throws if auth object is missing needed API keys
     *
     * @returns {Promise<string>} Promise of a valid authentication header
     */

  }, {
    key: "getTokenHeader",
    value: function () {
      var _getTokenHeader = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this._authToken === null || Date.now() > this._authTokenTimeout)) {
                  _context4.next = 7;
                  break;
                }

                if (!this.canPerformTokenAuth()) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 4;
                return this.tokenAuth();

              case 4:
                _context4.t0 = _context4.sent;
                return _context4.abrupt("return", 'Bearer ' + _context4.t0);

              case 6:
                throw new Error('Missing needed API keys to perform token auth');

              case 7:
                return _context4.abrupt("return", 'Bearer ' + this._authToken);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getTokenHeader() {
        return _getTokenHeader.apply(this, arguments);
      }

      return getTokenHeader;
    }()
    /**
     * Retrieves token for an API key and secret
     *
     * @returns {Promise<string>} Promise of a valid authentication header
     */

  }, {
    key: "tokenAuth",
    value: function () {
      var _tokenAuth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5() {
        var response, json;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return fetch(this.config.apiUrl + '/v1/auth/token', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'x-www-form-urlencoded',
                    Authorization: 'Basic ' + (0, _.btoa)(this.config.apiKeyId + ':' + this.config.apiSecret)
                  },
                  body: 'grant_type=client_credentials'
                });

              case 2:
                response = _context5.sent;
                _context5.next = 5;
                return response.json();

              case 5:
                json = _context5.sent;
                this._authToken = json.access_token;
                this._authTokenTimeout = Date.parse(json.expires_at);
                return _context5.abrupt("return", this._authToken);

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function tokenAuth() {
        return _tokenAuth.apply(this, arguments);
      }

      return tokenAuth;
    }()
    /**
     * Transparent fetch() wrapper to set up authentication headers for oAuth based authentication
     *
     * @param {string} urlString Absolute URL to fetch from the server
     * @param {object} options Object representing additional settings for the fetch
     *
     * @returns {Promise}
     */

  }, {
    key: "tokenFetch",
    value: function () {
      var _tokenFetch = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(urlString, options) {
        var authHeader;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getTokenHeader();

              case 2:
                authHeader = _context6.sent;
                options.headers = options.headers || {};
                options.headers.Authorization = authHeader;
                return _context6.abrupt("return", fetch(urlString, options));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function tokenFetch(_x10, _x11) {
        return _tokenFetch.apply(this, arguments);
      }

      return tokenFetch;
    }()
    /**
     * Transparent fetch() wrapper to set up authentication headers for either tsv1 or oAuth based authentication
     *
     * @param {string} urlString Absolute URL to fetch from the server
     * @param {object} options Object representing additional settings for the fetch
     *
     * @returns {Promise}
     */

  }, {
    key: "fetch",
    value: function (_fetch) {
      function fetch(_x, _x2) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(urlString, options) {
        var authHeader;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.authenticateHeader(urlString, options);

              case 2:
                authHeader = _context7.sent;
                options.headers = options.headers || {};
                options.headers.Authorization = authHeader;
                return _context7.abrupt("return", fetch(urlString, options));

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x12, _x13) {
        return _ref.apply(this, arguments);
      };
    }())
    /**
     * Transparent fetch() wrapper to set up authentication headers for oAuth based authentication
     *
     * @param {string} urlString Absolute URL to fetch from the server
     * @param {object} options Object representing additional settings for the fetch
     *
     * @returns {Promise}
     */

  }, {
    key: "tsv1Fetch",
    value: function () {
      var _tsv1Fetch = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8(urlString, options) {
        var authHeader;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.getTSV1Header(urlString, options);

              case 2:
                authHeader = _context8.sent;
                options.headers = options.headers || {};
                options.headers.Authorization = authHeader;
                return _context8.abrupt("return", fetch(urlString, options));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function tsv1Fetch(_x14, _x15) {
        return _tsv1Fetch.apply(this, arguments);
      }

      return tsv1Fetch;
    }()
  }], [{
    key: "anonymousAuth",
    value: function () {
      var _anonymousAuth = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9(crypto, publicSigningKey, privateSigningKey) {
        var config;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                config = _config["default"].fromObject({
                  publicSigningKey: publicSigningKey,
                  privateSigningKey: privateSigningKey
                });
                return _context9.abrupt("return", new AuthenticatedRequest(config, crypto));

              case 2:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function anonymousAuth(_x16, _x17, _x18) {
        return _anonymousAuth.apply(this, arguments);
      }

      return anonymousAuth;
    }()
  }]);
  return AuthenticatedRequest;
}();

module.exports = AuthenticatedRequest;