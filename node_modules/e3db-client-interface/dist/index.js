/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Identity", {
  enumerable: true,
  get: function get() {
    return _identity["default"];
  }
});
Object.defineProperty(exports, "Crypto", {
  enumerable: true,
  get: function get() {
    return _crypto["default"];
  }
});
exports.types = exports.Storage = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _identity = _interopRequireDefault(require("./identity"));

var Storage = _interopRequireWildcard(require("./storage"));

exports.Storage = Storage;

var types = _interopRequireWildcard(require("./types"));

exports.types = types;

var _crypto = _interopRequireDefault(require("./crypto"));

var Tozny = function Tozny(identity, storage, crypto) {
  var helpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  (0, _classCallCheck2["default"])(this, Tozny);

  if (_identity["default"].isExtension(identity) && Storage.isExtension(storage) && _crypto["default"].isExtension(crypto)) {
    this.Identity = identity;
    this.Storage = storage;
    this.Crypto = crypto;
    this.crypto = crypto.instance;
    this.helpers = helpers;
    this.types = types;
  } else {
    throw new Error('To create a Tozny object you must pass valid implementations of the Storage, Identity, and Crypto interfaces.');
  }
};

exports["default"] = Tozny;