/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _eakInfo = _interopRequireDefault(require("./eakInfo"));

var _meta = _interopRequireDefault(require("./meta"));

var _record = _interopRequireDefault(require("./record"));

/**
 * Describe a query result returned from E3DB API.
 */
var QueryResult =
/*#__PURE__*/
function () {
  function QueryResult(client, query) {
    (0, _classCallCheck2["default"])(this, QueryResult);
    this.afterIndex = 0;
    this.client = client;
    this.query = query;
    this.done = false;
  }
  /**
   * Get the next page of results from the current query
   *
   * @returns {Promise<array>}
   */


  (0, _createClass2["default"])(QueryResult, [{
    key: "next",
    value: function () {
      var _next = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var _this = this;

        var query, response, records;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.done) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve([]));

              case 2:
                query = this.query;
                query.afterIndex = this.afterIndex;
                _context2.next = 6;
                return this.client._query(query);

              case 6:
                response = _context2.sent;

                if (!(response.results.length === 0)) {
                  _context2.next = 10;
                  break;
                }

                this.done = true;
                return _context2.abrupt("return", Promise.resolve([]));

              case 10:
                _context2.next = 12;
                return Promise.all(response.results.map(
                /*#__PURE__*/
                function () {
                  var _ref = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee(result) {
                    var meta, record, eak, ak;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _meta["default"].decode(result.meta);

                          case 2:
                            meta = _context.sent;
                            record = new _record["default"](meta, result.record_data);

                            if (!(query.includeData && result.access_key !== null)) {
                              _context.next = 12;
                              break;
                            }

                            _context.next = 7;
                            return _eakInfo["default"].decode(result.access_key);

                          case 7:
                            eak = _context.sent;
                            _context.next = 10;
                            return _this.client.crypto.decryptEak(_this.client.config.privateKey, eak);

                          case 10:
                            ak = _context.sent;
                            return _context.abrupt("return", _this.client.crypto.decryptRecord(record, ak));

                          case 12:
                            return _context.abrupt("return", Promise.resolve(record));

                          case 13:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 12:
                records = _context2.sent;

                /* eslint-enable */
                this.afterIndex = response.last_index;
                return _context2.abrupt("return", Promise.resolve(records));

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function next() {
        return _next.apply(this, arguments);
      }

      return next;
    }()
  }]);
  return QueryResult;
}();

exports["default"] = QueryResult;