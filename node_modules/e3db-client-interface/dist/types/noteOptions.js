/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _serializable = _interopRequireDefault(require("./serializable"));

/**
 * NoteOptions represents optional values that are not required for creating a note,
 * but provide additional functionality. Some features are premium and require a TozStore client to work.
 */
var NoteOptions =
/*#__PURE__*/
function (_Serializable) {
  (0, _inherits2["default"])(NoteOptions, _Serializable);

  function NoteOptions(clientId, maxViews, idString, expiration, expires, type, plain, fileMeta) {
    var _this;

    (0, _classCallCheck2["default"])(this, NoteOptions);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NoteOptions).call(this)); // Premium features

    _this.clientId = clientId;
    _this.maxViews = maxViews;
    _this.idString = idString; // User defined id (id_string) available as part of premium features.

    _this.expiration = expiration;
    _this.expires = expires; // Non-premium

    _this.type = type;
    _this.plain = plain;
    _this.fileMeta = fileMeta;
    return _this;
  }

  (0, _createClass2["default"])(NoteOptions, [{
    key: "serializable",
    value: function serializable() {
      /* eslint-disable camelcase */
      var toSerialize = {
        client_id: this.clientId,
        max_views: this.maxViews,
        id_string: this.idString,
        expiration: this.expiration,
        expires: this.expires,
        type: this.type // Ensure that plainMeta is always an object, even it it's set to null

      };

      if (this.plain === null) {
        toSerialize.plain = {};
      } else {
        toSerialize.plain = this.plain;
      } // Ensure that fileMeta is always an object, even it it's set to null


      if (this.fileMeta === null) {
        toSerialize.file_meta = {};
      } else {
        toSerialize.file_meta = this.fileMeta;
      }
      /* eslint-enabled */


      var serializedKeys = Object.keys(toSerialize);

      for (var _i = 0, _serializedKeys = serializedKeys; _i < _serializedKeys.length; _i++) {
        var key = _serializedKeys[_i];

        if (toSerialize[key] === null) {
          delete toSerialize[key];
        }
      }

      return toSerialize;
    }
  }], [{
    key: "decode",
    value: function decode(json) {
      var type = json.type === undefined ? null : json.type;
      var plain = json.plain === undefined ? {} : json.plain;
      var fileMeta = json.file_meta === undefined ? {} : json.file_meta;
      var clientId = json.client_id === undefined ? undefined : json.client_id;
      var maxViews = json.max_views === undefined ? null : json.max_views;
      var idString = json.id_string === undefined ? null : json.id_string;
      var expiration = json.expiration === undefined ? null : json.expiration;
      var expires = json.expires === undefined ? null : json.expires;
      return new NoteOptions(clientId, maxViews, idString, expiration, expires, type, plain, fileMeta);
    }
  }]);
  return NoteOptions;
}(_serializable["default"]);

exports["default"] = NoteOptions;