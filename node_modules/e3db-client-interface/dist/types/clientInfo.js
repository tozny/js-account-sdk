/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _publicKey = _interopRequireDefault(require("./publicKey"));

var _signingKey = _interopRequireDefault(require("./signingKey"));

/**
 * Information about a specific E3DB client, including the client's
 * public key to be used for cryptographic operations.
 *
 * @property {string}     clientId   UUID representing the client.
 * @property {PublicKey}  publicKey  Curve25519 public key for the client.
 * @property {bool}       validated  Flag whether or not the client has been validated.
 * @property {SigningKey} signingKey Ed25519 public key for the client.
 */
var ClientInfo =
/*#__PURE__*/
function () {
  function ClientInfo(clientId, publicKey, validated, signingKey) {
    (0, _classCallCheck2["default"])(this, ClientInfo);
    this.clientId = clientId;
    this.publicKey = publicKey;
    this.validated = validated;

    if (signingKey === null) {
      signingKey = new _signingKey["default"](null);
    }

    this.signingKey = signingKey;
  }
  /**
   * Specify how an already unserialized JSON array should be marshaled into
   * an object representation.
   *
   * Client information contains the ID of the client, a Curve25519 public key
   * component, and a flag describing whether or not the client has been validated.
   *
   * <code>
   * info = ClientInfo::decode({
   *   client_id: '',
   *   public_key: {
   *     curve25519: ''
   *   },
   *   signing_key: {
   *     ed25519: ''
   *   },
   *   validated: true
   * })
   * <code>
   *
   * @param {object} json
   *
   * @return {Promise<ClientInfo>}
   */


  (0, _createClass2["default"])(ClientInfo, null, [{
    key: "decode",
    value: function () {
      var _decode = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(json) {
        var publicKey, signingKey;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _publicKey["default"].decode(json.public_key);

              case 2:
                publicKey = _context.sent;
                signingKey = new _signingKey["default"](null);

                if (!(json.hasOwnProperty('signing_key') && json.signing_key !== null)) {
                  _context.next = 8;
                  break;
                }

                _context.next = 7;
                return _signingKey["default"].decode(json.signing_key);

              case 7:
                signingKey = _context.sent;

              case 8:
                return _context.abrupt("return", Promise.resolve(new ClientInfo(json.client_id, publicKey, json.validated, signingKey)));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function decode(_x) {
        return _decode.apply(this, arguments);
      }

      return decode;
    }()
  }]);
  return ClientInfo;
}();

exports["default"] = ClientInfo;