/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _serializable = _interopRequireDefault(require("./serializable"));

var NoteKeys =
/*#__PURE__*/
function (_Serializable) {
  (0, _inherits2["default"])(NoteKeys, _Serializable);

  function NoteKeys(mode, recipientSigningKey, writerSigningKey, writerEncryptionKey, encryptedAccessKey) {
    var _this;

    (0, _classCallCheck2["default"])(this, NoteKeys);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NoteKeys).call(this));
    _this.mode = mode;
    _this.recipientSigningKey = recipientSigningKey;
    _this.writerSigningKey = writerSigningKey;
    _this.writerEncryptionKey = writerEncryptionKey;
    _this.encryptedAccessKey = encryptedAccessKey;
    return _this;
  }

  (0, _createClass2["default"])(NoteKeys, [{
    key: "serializable",
    value: function serializable() {
      /* eslint-disable camelcase */
      var toSerialize = {
        mode: this.mode,
        recipient_signing_key: this.recipientSigningKey,
        writer_signing_key: this.writerSigningKey,
        writer_encryption_key: this.writerEncryptionKey,
        encrypted_access_key: this.encryptedAccessKey
        /* eslint-enabled */

      };
      var serializedKeys = Object.keys(toSerialize);

      for (var _i = 0, _serializedKeys = serializedKeys; _i < _serializedKeys.length; _i++) {
        var key = _serializedKeys[_i];

        if (toSerialize[key] === null) {
          delete toSerialize[key];
        }
      }

      return toSerialize;
    }
  }], [{
    key: "decode",
    value: function decode(json) {
      var mode = json.mode === undefined ? null : json.mode;
      var recipientSigningKey = json.recipient_signing_key === undefined ? null : json.recipient_signing_key;
      var writerSigningKey = json.writer_signing_key === undefined ? null : json.writer_signing_key;
      var writerEncryptionKey = json.writer_encryption_key === undefined ? null : json.writer_encryption_key;
      var encryptedAccessKey = json.encrypted_access_key === undefined ? null : json.encrypted_access_key;
      return new NoteKeys(mode, recipientSigningKey, writerSigningKey, writerEncryptionKey, encryptedAccessKey);
    }
  }]);
  return NoteKeys;
}(_serializable["default"]);

exports["default"] = NoteKeys;