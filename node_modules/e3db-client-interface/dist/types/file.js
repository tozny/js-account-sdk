/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var File =
/*#__PURE__*/
function () {
  /* eslint-disable max-params */
  function File(checksum, compression, size, writerId, userId, recordType) {
    var plain = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
    var fileUrl = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var fileName = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
    var recordId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
    var created = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
    var lastModified = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;
    var version = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;
    (0, _classCallCheck2["default"])(this, File);
    // Empty dict for data.
    this.data = {}; // Base64 encoded MD5 Checksum of the Encrypted File, including E3DB Header information

    this.checksum = checksum; // The type of compression the file is using, before encryption. Reserved for future use.

    this.compression = compression; // Size of the encrypted file, in bytes, including E3DB Header information

    this.size = size;
    this.writerId = writerId;
    this.userId = userId;
    this.recordType = recordType; // Optional. Signed url used for PUT/GET to storage server

    this.fileUrl = fileUrl; // Optional. Name of the file stored on the server. File name consists of UUID + timestamp. Returned by the server after the file has been uploaded.

    this.fileName = fileName; // Optional. ID of the Record in a UUID format. Returned by the server after the file has been uploaded.

    this.recordId = recordId; // Optional. Created timestamp of the file, returned by the server after the file has been uploaded.

    this.created = created; // Optional. Last Modified timestamp of the file, returned by the server after the file has been uploaded.

    this.lastModified = lastModified; // Optional. The version of the file based on File structure and cryptographic methods.

    this.version = version; // Optional. Plaintext metadata attached to the File.

    this.plain = plain;
  }
  /* eslint-enable maxparams */


  (0, _createClass2["default"])(File, [{
    key: "removeEmpty",
    value: function removeEmpty(obj) {
      /*
      Parameters
      ----------
      serialize: dict
        Dictionary to remove empty elements from
      Returns
      -------
      dict
        Dictionary with empty elements removed
      */
      for (var _i = 0, _Object$entries = Object.entries(obj); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
            key = _Object$entries$_i[0],
            val = _Object$entries$_i[1];

        if (val instanceof Object) {
          this.removeEmpty(val);
        } else if (!val) {
          delete obj[key];
        }
      }

      return obj;
    }
  }, {
    key: "toJson",
    value: function toJson() {
      /*
      Serialize the configuration as JSON-style object.
      Parameters
      ----------
      None
      Returns
      -------
      dict
        JSON-style document containing the Meta elements.
      */

      /* eslint-disable camelcase */
      var jsonRep = {
        meta: {
          record_id: this.recordId,
          writer_id: this.writerId,
          user_id: this.userId,
          type: this.recordType,
          created: this.created,
          last_modified: this.lastModified,
          version: this.version,
          file_meta: {
            file_url: this.fileUrl,
            file_name: this.fileName,
            checksum: this.checksum,
            compression: this.compression,
            size: parseInt(this.size, 10)
          },
          plain: this.plain
        },
        data: this.data
        /* eslint-enable camelcase */
        // Remove None (JSON null) objects

      };
      return this.removeEmpty(jsonRep);
    }
  }]);
  return File;
}();

exports["default"] = File;