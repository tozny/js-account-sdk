/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _signable = _interopRequireDefault(require("./signable"));

var _noteKeys = _interopRequireDefault(require("./noteKeys"));

var _noteData = _interopRequireDefault(require("./noteData"));

/*
 * NoteInfo represents required note information that is signed before encrypting
 */
var NoteInfo =
/*#__PURE__*/
function (_Signable) {
  (0, _inherits2["default"])(NoteInfo, _Signable);

  function NoteInfo(data, noteKeys) {
    var _this;

    (0, _classCallCheck2["default"])(this, NoteInfo);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NoteInfo).call(this));
    _this.data = data;
    _this.noteKeys = noteKeys;
    return _this;
  }

  (0, _createClass2["default"])(NoteInfo, [{
    key: "serializable",
    value: function serializable() {
      var toSerialize = {
        data: this.data,
        note_keys: this.noteKeys.serializable()
      };
      var serializedKeys = Object.keys(toSerialize);

      for (var _i = 0, _serializedKeys = serializedKeys; _i < _serializedKeys.length; _i++) {
        var key = _serializedKeys[_i];

        if (toSerialize[key] === null) {
          delete toSerialize[key];
        }
      }

      return toSerialize;
    }
  }], [{
    key: "decode",
    value: function decode(json) {
      var data = new _noteData["default"](json.data);

      var noteKeys = _noteKeys["default"].decode(json);

      var signableNote = new NoteInfo(data, noteKeys);
      return signableNote;
    }
    /**
     * SignableSubsetFromNote creates extracts static note fields into a noteInfo
     * that will create the same signature if valid.
     */

  }, {
    key: "signableSubsetFromNote",
    value: function signableSubsetFromNote(note) {
      return NoteInfo.decode(note.serializable());
    }
  }]);
  return NoteInfo;
}(_signable["default"]);

exports["default"] = NoteInfo;