/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _serializable = _interopRequireDefault(require("./serializable"));

var _constants = require("../utils/constants");

/**
 * Describe a query request against the E3DB API.
 */
var Query =
/*#__PURE__*/
function (_Serializable) {
  (0, _inherits2["default"])(Query, _Serializable);

  function Query() {
    var _this;

    var afterIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var includeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var writerIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var recordIds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var contentTypes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var plain = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var userIds = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var count = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : _constants.DEFAULT_QUERY_COUNT;
    var includeAllWriters = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;
    (0, _classCallCheck2["default"])(this, Query);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Query).call(this));
    _this.afterIndex = afterIndex;
    _this.includeData = includeData;
    _this.writerIds = writerIds;
    _this.recordIds = recordIds;
    _this.contentTypes = contentTypes;
    _this.userIds = userIds;
    _this.count = count;
    _this.includeAllWriters = includeAllWriters;

    if (writerIds instanceof Array) {
      _this.writerIds = writerIds;
    } else if (writerIds !== null) {
      _this.writerIds = [writerIds];
    }

    if (recordIds instanceof Array) {
      _this.recordIds = recordIds;
    } else if (recordIds !== null) {
      _this.recordIds = [recordIds];
    }

    if (contentTypes instanceof Array) {
      _this.contentTypes = contentTypes;
    } else if (contentTypes !== null) {
      _this.contentTypes = [contentTypes];
    }

    if (userIds instanceof Array) {
      _this.userIds = userIds;
    } else if (userIds !== null) {
      _this.userIds = [userIds];
    }

    if ((0, _typeof2["default"])(plain) === 'object') {
      _this.plain = plain;
    } else {
      _this.plain = null;
    }

    return _this;
  }
  /* eslint-disable camelcase */

  /**
   * Generate a JSON.stringify-friendly version of the object
   * automatically omitting any `null` fields.
   *
   * @returns {object}
   */


  (0, _createClass2["default"])(Query, [{
    key: "serializable",
    value: function serializable() {
      var toSerialize = {};

      if (this.count !== null) {
        toSerialize.count = this.count;
      }

      if (this.includeData !== null) {
        toSerialize.include_data = Boolean(this.includeData);
      }

      if (this.writerIds !== null && this.writerIds.length > 0) {
        toSerialize.writer_ids = this.writerIds;
      }

      if (this.userIds !== null && this.userIds.length > 0) {
        toSerialize.user_ids = this.userIds;
      }

      if (this.recordIds !== null && this.recordIds.length > 0) {
        toSerialize.record_ids = this.recordIds;
      }

      if (this.contentTypes !== null && this.contentTypes.length > 0) {
        toSerialize.content_types = this.contentTypes;
      }

      if (this.plain !== null) {
        toSerialize.plain = this.plain;
      }

      if (this.afterIndex !== null) {
        toSerialize.after_index = this.afterIndex;
      }

      if (this.includeAllWriters !== null) {
        toSerialize.include_all_writers = Boolean(this.includeAllWriters);
      }

      for (var key in toSerialize) {
        if (toSerialize.hasOwnProperty(key)) {
          if (toSerialize[key] === null) {
            delete toSerialize[key];
          }
        }
      }

      return toSerialize;
    }
    /* eslint-enable */

  }]);
  return Query;
}(_serializable["default"]);

exports["default"] = Query;