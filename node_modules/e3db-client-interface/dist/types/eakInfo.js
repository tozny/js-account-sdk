/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _publicKey = _interopRequireDefault(require("./publicKey"));

var _serializable = _interopRequireDefault(require("../types/serializable"));

var _signingKey = _interopRequireDefault(require("./signingKey"));

/**
 * Representation of a cached, encrypted access key
 *
 * @property {string} eak
 * @property {string} authorizerID
 * @property {string} authorizerPublicKey
 * @property {string} signerId
 * @property {string} signerSigningKey
 */
var EAKInfo =
/*#__PURE__*/
function (_Serializable) {
  (0, _inherits2["default"])(EAKInfo, _Serializable);

  function EAKInfo(eak, authorizerID, authorizerPublicKey, signerId, signerSigningKey) {
    var _this;

    (0, _classCallCheck2["default"])(this, EAKInfo);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(EAKInfo).call(this));
    _this.eak = eak;
    _this.authorizerID = authorizerID;
    _this.authorizerPublicKey = new _publicKey["default"](authorizerPublicKey);
    _this.signerId = signerId;
    _this.signerSigningKey = new _signingKey["default"](signerSigningKey);
    return _this;
  }
  /* eslint-disable camelcase */

  /**
   * Generate a JSON.stringify-friendly version of the object
   * automatically omitting any `null` fields.
   *
   * @returns {object}
   */


  (0, _createClass2["default"])(EAKInfo, [{
    key: "serializable",
    value: function serializable() {
      var toSerialize = {
        eak: this.eak,
        authorizer_id: this.authorizerID,
        authorizer_public_key: this.authorizerPublicKey,
        signer_id: this.signerId,
        signer_signing_key: this.signerSigningKey
      };

      for (var key in toSerialize) {
        if (toSerialize.hasOwnProperty(key)) {
          if (toSerialize[key] === null) {
            delete toSerialize[key];
          }
        }
      }

      return toSerialize;
    }
    /* eslint-enable */

    /**
     * Specify how an already unserialized JSON array should be marshaled into
     * an object representation.
     *
     * The array expected for deserializing back into an object requires:
     *
     * <code>
     * $eakInfo = EAKInfo::decode({
     *   'eak'                   => '',
     *   'authorizer_id'         => '',
     *   'authorizer_public_key' => '',
     *   'signer_id'             => '',
     *   'signer_signing_key'    => ''
     * });
     * </code>
     *
     * @param {object} json
     *
     * @return {Promise<EAKInfo>}
     */

  }], [{
    key: "decode",
    value: function () {
      var _decode = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(json) {
        var signerId, signingKey;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                signerId = null;
                signingKey = null;

                if (json.hasOwnProperty('signer_id')) {
                  signerId = json.signer_id;
                }

                if (json.hasOwnProperty('signer_signing_key') && json.signer_signing_key !== null && json.signer_signing_key.hasOwnProperty('ed25519')) {
                  signingKey = json.signer_signing_key.ed25519;
                }

                return _context.abrupt("return", Promise.resolve(new EAKInfo(json.eak, json.authorizer_id, json.authorizer_public_key.curve25519, signerId, signingKey)));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function decode(_x) {
        return _decode.apply(this, arguments);
      }

      return decode;
    }()
  }]);
  return EAKInfo;
}(_serializable["default"]);

exports["default"] = EAKInfo;