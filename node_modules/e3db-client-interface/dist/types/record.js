/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _meta = _interopRequireDefault(require("./meta"));

var _recordData = _interopRequireDefault(require("./recordData"));

var _signable = _interopRequireDefault(require("./signable"));

/**
 * A E3DB record containing data and metadata. Records are
 * a key/value mapping containing data serialized
 * into strings. All records are encrypted prior to sending them
 * to the server for storage, and decrypted in the client after
 * they are read.
 *
 * @property {Meta}       meta      Meta information about the record.
 * @property {RecordData} data      Either plaintext or encrypted record fields
 * @property {string}     signature Signature over unencrypted record data
 */
var Record =
/*#__PURE__*/
function (_Signable) {
  (0, _inherits2["default"])(Record, _Signable);

  function Record(meta, data) {
    var _this;

    var signature = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    (0, _classCallCheck2["default"])(this, Record);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Record).call(this));

    if (meta instanceof _meta["default"]) {
      _this.meta = meta;
    } else {
      throw new Error('Record meta must be a Meta object!');
    }

    if (data instanceof _recordData["default"] || data === null) {
      _this.data = data;
    } else if (data instanceof Object) {
      _this.data = new _recordData["default"](data);
    } else {
      throw new Error('Record data must be an object!');
    }

    _this.signature = signature;
    return _this;
  }
  /* eslint-disable camelcase */

  /**
   * Generate a JSON.stringify-friendly version of the object
   * automatically omitting any `null` fields.
   *
   * @returns {object}
   */


  (0, _createClass2["default"])(Record, [{
    key: "serializable",
    value: function serializable() {
      return {
        meta: this.meta.serializable(),
        data: this.data.serializable(),
        rec_sig: this.signature
      };
    }
    /* eslint-enabled */

    /**
     * Specify how an already unserialized JSON array should be marshaled into
     * an object representation.
     *
     * Records consist of two elements, meta and data. The array we deserialize into a Record instance
     * must match this format. The meta element is itself an array representing the Meta class. The
     * data element is a simpler array mapping string keys to either encrypted or plaintext string values.
     *
     * <code>
     * record = Record::decode({
     *   meta: {
     *     record_id:     '',
     *     writer_id:     '',
     *     user_id:       '',
     *     type:          '',
     *     plain:         {},
     *     created:       '',
     *     last_modified: '',
     *     version:       ''
     *   },
     *   data: {
     *     key1: 'value',
     *     key2: 'value'
     *   },
     *   rec_sig: ''
     * })
     * </code>
     *
     * @param {array} parsed
     *
     * @return {Promise<Record>}
     */

  }], [{
    key: "decode",
    value: function () {
      var _decode = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(json) {
        var meta, signature;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _meta["default"].decode(json.meta);

              case 2:
                meta = _context.sent;
                signature = json.rec_sig === undefined ? null : json.rec_sig;
                return _context.abrupt("return", Promise.resolve(new Record(meta, json.data, signature)));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function decode(_x) {
        return _decode.apply(this, arguments);
      }

      return decode;
    }()
  }]);
  return Record;
}(_signable["default"]);

exports["default"] = Record;