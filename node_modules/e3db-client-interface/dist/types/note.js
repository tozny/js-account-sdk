/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, this license permits use of the
 * software only by government agencies, schools, universities, non-profit
 * organizations or individuals on projects that do not receive external
 * funding other than government research grants and contracts. Any other use
 * requires a commercial license. For the full license, please see LICENSE.md,
 * in this source repository.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _noteKeys = _interopRequireDefault(require("./noteKeys"));

var _noteOptions = _interopRequireDefault(require("./noteOptions"));

var Note =
/*#__PURE__*/
function () {
  function Note(data, noteKeys, signature, options) {
    (0, _classCallCheck2["default"])(this, Note);
    // Required values
    this.data = data; // Key values

    this.mode = noteKeys.mode;
    this.recipientSigningKey = noteKeys.recipientSigningKey;
    this.writerEncryptionKey = noteKeys.writerEncryptionKey;
    this.writerSigningKey = noteKeys.writerSigningKey;
    this.encryptedAccessKey = noteKeys.encryptedAccessKey; // Verification signature

    this.signature = signature; // Optional values

    this.options = options;
    this.createdAt = null; // Server defined value, not available until creation.

    this.noteId = null;
  }

  (0, _createClass2["default"])(Note, [{
    key: "serializable",
    value: function serializable() {
      /* eslint-disable camelcase */
      var toSerialize = {
        data: this.data,
        mode: this.mode,
        recipient_signing_key: this.recipientSigningKey,
        writer_signing_key: this.writerSigningKey,
        writer_encryption_key: this.writerEncryptionKey,
        encrypted_access_key: this.encryptedAccessKey,
        signature: this.signature,
        type: this.options.type,
        plain: this.options.plain,
        file_meta: this.options.fileMeta,
        max_views: this.options.maxViews,
        client_id: this.options.clientId,
        id_string: this.options.idString,
        expiration: this.options.expiration,
        expires: this.options.expires,
        created_at: this.createdAt,
        note_id: this.noteId // Ensure that fileMeta is always an object, even it it's set to null

      };

      if (this.options.fileMeta === null) {
        toSerialize.file_meta = {};
      } else {
        toSerialize.file_meta = this.options.fileMeta;
      }
      /* eslint-enable */
      // Ensure that plain is always an object, even it it's set to null


      if (this.options.plain === null) {
        toSerialize.plain = {};
      } else {
        toSerialize.plain = this.options.plain;
      }

      var serializedKeys = Object.keys(toSerialize);

      for (var _i = 0, _serializedKeys = serializedKeys; _i < _serializedKeys.length; _i++) {
        var key = _serializedKeys[_i];

        if (toSerialize[key] === null) {
          delete toSerialize[key];
        }
      }

      return toSerialize;
    }
  }, {
    key: "toJson",
    value: function toJson() {
      /* eslint-disable camelcase */
      return JSON.stringify({
        data: this.data,
        mode: this.mode,
        recipient_signing_key: this.recipientSigningKey,
        writer_signing_key: this.writerSigningKey,
        writer_encryption_key: this.writerEncryptionKey,
        encrypted_access_key: this.encryptedAccessKey,
        signature: this.signature,
        type: this.options.type,
        plain: this.options.plain,
        file_meta: this.options.fileMeta,
        max_views: this.options.maxViews,
        client_id: this.options.clientId,
        id_string: this.options.idString,
        expiration: this.options.expiration,
        expires: this.options.expires,
        created_at: this.createdAt,
        note_id: this.noteId
      });
      /* eslint-enabled */
    }
  }], [{
    key: "decode",
    value: function decode(json) {
      var data = json.data === undefined ? null : json.data;

      var options = _noteOptions["default"].decode(json);

      var noteKeys = _noteKeys["default"].decode(json);

      var signature = json.signature === undefined ? null : json.signature;
      var note = new Note(data, noteKeys, signature, options); // Server defined values

      var createdAt = json.created_at === null ? null : json.created_at;
      var noteId = json.note_id === null ? null : json.note_id;
      note.createdAt = createdAt;
      note.noteId = noteId;
      return note;
    }
  }, {
    key: "clone",
    value: function clone(note) {
      var jsonNote = note.serializable();
      var cloneNote = Note.decode(jsonNote);
      return cloneNote;
    }
  }]);
  return Note;
}();

exports["default"] = Note;