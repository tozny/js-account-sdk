/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

require("es6-promise/auto");

require("isomorphic-fetch");

var _authenticatedRequest = _interopRequireDefault(require("../utils/authenticatedRequest"));

var _cryptoConsumer = _interopRequireDefault(require("../utils/cryptoConsumer"));

var _config = _interopRequireDefault(require("./config"));

var _utils = require("../utils");

var _constants = require("../utils/constants");

var _types = require("../types");

/**
 * Retrieve an access key from the server.
 *
 * @param {Client} client E3DB client instance
 * @param {string} writerId Writer/Authorizer for the access key
 * @param {string} userId   Record subject
 * @param {string} readerId Authorized reader
 * @param {string} type     Record type for which the key will be used
 *
 * @returns {Promise<EAKInfo|null>} Encrypted access key on success, NULL if no key exists.
 */
function getEncryptedAccessKey(_x, _x2, _x3, _x4, _x5) {
  return _getEncryptedAccessKey.apply(this, arguments);
}
/**
 * Retrieve an access key from the server.
 *
 * @param {Client} client E3DB client instance
 * @param {string} writerId Writer/Authorizer for the access key
 * @param {string} userId   Record subject
 * @param {string} readerId Authorized reader
 * @param {string} type     Record type for which the key will be used
 *
 * @returns {Promise<string|null>} Decrypted access key on success, NULL if no key exists.
 */


function _getEncryptedAccessKey() {
  _getEncryptedAccessKey = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee40(client, writerId, userId, readerId, type) {
    var response;
    return _regenerator["default"].wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            _context40.next = 2;
            return client.authenticator.tokenFetch(client.config.apiUrl + '/v1/storage/access_keys/' + writerId + '/' + userId + '/' + readerId + '/' + type, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 2:
            response = _context40.sent;

            if (!(response.status && response.status === 404)) {
              _context40.next = 5;
              break;
            }

            return _context40.abrupt("return", Promise.resolve(null));

          case 5:
            return _context40.abrupt("return", (0, _utils.checkStatus)(response).then(function (response) {
              return response.json();
            }).then(function (eak) {
              return _types.EAKInfo.decode(eak);
            }));

          case 6:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));
  return _getEncryptedAccessKey.apply(this, arguments);
}

function getAccessKey(_x6, _x7, _x8, _x9, _x10) {
  return _getAccessKey.apply(this, arguments);
}
/**
 * Create an access key on the server.
 *
 * @param {Client} client   E3DB client instance
 * @param {string} writerId Writer/Authorizer for the access key
 * @param {string} userId   Record subject
 * @param {string} readerId Authorized reader
 * @param {string} type     Record type for which the key will be used
 * @param {string} ak       Unencrypted access key

 @returns {Promise<string>} Decrypted access key
 */


function _getAccessKey() {
  _getAccessKey = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee41(client, writerId, userId, readerId, type) {
    var cacheKey;
    return _regenerator["default"].wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            cacheKey = "".concat(writerId, ".").concat(userId, ".").concat(type);

            if (!(client._akCache[cacheKey] !== undefined)) {
              _context41.next = 3;
              break;
            }

            return _context41.abrupt("return", Promise.resolve(client._akCache[cacheKey]));

          case 3:
            return _context41.abrupt("return", getEncryptedAccessKey(client, writerId, userId, readerId, type).then(function (eak) {
              if (eak === null) {
                return Promise.resolve(null);
              }

              return client.crypto.decryptEak(client.config.privateKey, eak);
            }).then(function (key) {
              if (key !== null) {
                client._akCache[cacheKey] = key;
              }

              return Promise.resolve(key);
            })["catch"](function (err) {
              return console.log(err);
            }));

          case 4:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));
  return _getAccessKey.apply(this, arguments);
}

function putAccessKey(_x11, _x12, _x13, _x14, _x15, _x16) {
  return _putAccessKey.apply(this, arguments);
}
/**
 * Delete an access key on the server.
 *
 * @param {Client} client   E3DB client instance
 * @param {string} writerId Writer/Authorizer for the access key
 * @param {string} userId   Record subject
 * @param {string} readerId Authorized reader
 * @param {string} type     Record type for which the key will be used
 *
 * @returns {Promise<bool>}
 */


function _putAccessKey() {
  _putAccessKey = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee42(client, writerId, userId, readerId, type, ak) {
    var clientInfo, readerKey, eak;
    return _regenerator["default"].wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            _context42.next = 2;
            return client.getClient(readerId);

          case 2:
            clientInfo = _context42.sent;
            readerKey = clientInfo.publicKey.curve25519;
            _context42.next = 6;
            return client.crypto.encryptAk(client.config.privateKey, ak, readerKey);

          case 6:
            eak = _context42.sent;
            return _context42.abrupt("return", client.authenticator.tokenFetch(client.config.apiUrl + '/v1/storage/access_keys/' + writerId + '/' + userId + '/' + readerId + '/' + type, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                eak: eak
              })
            }).then(_utils.checkStatus).then(function () {
              var cacheKey = "".concat(writerId, ".").concat(userId, ".").concat(type);
              client._akCache[cacheKey] = ak;
              return Promise.resolve(ak);
            }));

          case 8:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));
  return _putAccessKey.apply(this, arguments);
}

function deleteAccessKey(_x17, _x18, _x19, _x20, _x21) {
  return _deleteAccessKey.apply(this, arguments);
}
/**
 * Fetch the access key for a record type and use it to decrypt a given record.
 *
 * @param {Client} client E3DB client instance
 * @param {Record} encrypted Record to be decrypted
 *
 * @return {Promise<Record>}
 */


function _deleteAccessKey() {
  _deleteAccessKey = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee43(client, writerId, userId, readerId, type) {
    var request, cacheKey;
    return _regenerator["default"].wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            _context43.next = 2;
            return client.authenticator.tokenFetch(client.config.apiUrl + '/v1/storage/access_keys/' + writerId + '/' + userId + '/' + readerId + '/' + type, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 2:
            request = _context43.sent;
            _context43.next = 5;
            return (0, _utils.checkStatus)(request);

          case 5:
            cacheKey = "".concat(writerId, ".").concat(userId, ".").concat(type);
            delete client._akCache[cacheKey];
            return _context43.abrupt("return", true);

          case 8:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));
  return _deleteAccessKey.apply(this, arguments);
}

function decryptRecord(_x22, _x23) {
  return _decryptRecord.apply(this, arguments);
}
/**
 * Fetch the access key for a record type and use it to encrypt a given record.
 *
 * @param {Client} client E3DB client instance
 * @param {Record} record Record to be decrypted
 *
 * @return {Promise<Record>}
 */


function _decryptRecord() {
  _decryptRecord = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee44(client, encrypted) {
    var ak;
    return _regenerator["default"].wrap(function _callee44$(_context44) {
      while (1) {
        switch (_context44.prev = _context44.next) {
          case 0:
            _context44.next = 2;
            return getAccessKey(client, encrypted.meta.writerId, encrypted.meta.userId, client.config.clientId, encrypted.meta.type);

          case 2:
            ak = _context44.sent;

            if (!(ak === null)) {
              _context44.next = 5;
              break;
            }

            throw new Error('No access key available.');

          case 5:
            return _context44.abrupt("return", client.crypto.decryptRecord(encrypted, ak));

          case 6:
          case "end":
            return _context44.stop();
        }
      }
    }, _callee44);
  }));
  return _decryptRecord.apply(this, arguments);
}

function encryptRecord(_x24, _x25) {
  return _encryptRecord.apply(this, arguments);
}
/**
 * Core client module used to interact with the E3DB API.
 *
 * @property {Config} config E3DB client configuration.
 */


function _encryptRecord() {
  _encryptRecord = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee45(client, record) {
    var ak;
    return _regenerator["default"].wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _context45.next = 2;
            return getAccessKey(client, record.meta.writerId, record.meta.userId, client.config.clientId, record.meta.type);

          case 2:
            ak = _context45.sent;

            if (!(ak === null)) {
              _context45.next = 9;
              break;
            }

            _context45.next = 6;
            return client.crypto.randomKey();

          case 6:
            ak = _context45.sent;
            _context45.next = 9;
            return putAccessKey(client, record.meta.writerId, record.meta.userId, client.config.clientId, record.meta.type, ak);

          case 9:
            return _context45.abrupt("return", client.crypto.encryptRecord(record, ak));

          case 10:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  return _encryptRecord.apply(this, arguments);
}

var Client =
/*#__PURE__*/
function (_CryptoConsumer) {
  (0, _inherits2["default"])(Client, _CryptoConsumer);
  (0, _createClass2["default"])(Client, null, [{
    key: "register",

    /**
     * Register a new client with a specific account.
     *
     * @param {string}  registrationToken Registration token as presented by the admin console
     * @param {string}  clientName        Distinguishable name to be used for the token in the console
     * @param {KeyPair} cryptoKeys        Curve25519 keypair used for encryption
     * @param {KeyPair} signingKeys       Ed25519 keypair used for signing
     * @param {bool}    [backup]          Optional flag to automatically back up the newly-created credentials to the account service
     * @param {string}  [apiUrl]          Base URI for the e3DB API
     *
     * @returns {ClientDetails}
     */
    value: function () {
      var _register = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(registrationToken, clientName, cryptoKeys, signingKeys) {
        var backup,
            apiUrl,
            payload,
            backupClientId,
            request,
            response,
            json,
            details,
            config,
            client,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                backup = _args.length > 4 && _args[4] !== undefined ? _args[4] : false;
                apiUrl = _args.length > 5 && _args[5] !== undefined ? _args[5] : _constants.DEFAULT_API_URL;

                if (signingKeys) {
                  payload = {
                    token: registrationToken,
                    client: {
                      name: clientName,
                      public_key: new _types.PublicKey(cryptoKeys.publicKey),
                      signing_key: new _types.SigningKey(signingKeys.publicKey)
                    }
                  };
                } else {
                  payload = {
                    token: registrationToken,
                    client: {
                      name: clientName,
                      public_key: new _types.PublicKey(cryptoKeys.publicKey)
                    }
                  };
                }
                /* eslint-enable */


                backupClientId = false;
                _context.next = 6;
                return fetch(apiUrl + '/v1/account/e3db/clients/register', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(payload)
                });

              case 6:
                request = _context.sent;
                _context.next = 9;
                return (0, _utils.checkStatus)(request);

              case 9:
                response = _context.sent;

                if (response.headers.has('X-Backup-Client')) {
                  backupClientId = response.headers.get('X-Backup-Client');
                }

                _context.next = 13;
                return response.json();

              case 13:
                json = _context.sent;
                _context.next = 16;
                return _types.ClientDetails.decode(json);

              case 16:
                details = _context.sent;

                if (!(backup && backupClientId)) {
                  _context.next = 24;
                  break;
                }

                if (!(cryptoKeys.privateKey === null)) {
                  _context.next = 20;
                  break;
                }

                throw new Error('Cannot back up credentials without a private key!');

              case 20:
                config = signingKeys ? new _config["default"](details.clientId, details.apiKeyId, details.apiSecret, cryptoKeys.publicKey, cryptoKeys.privateKey, apiUrl, signingKeys.publicKey, signingKeys.privateKey) : new _config["default"](details.clientId, details.apiKeyId, details.apiSecret, cryptoKeys.publicKey, cryptoKeys.privateKey, apiUrl); // Using `this` as the constructor creates an instance of the implementing
                // concrete class rather than the interface

                client = new this(config);
                _context.next = 24;
                return client.backup(backupClientId, registrationToken);

              case 24:
                return _context.abrupt("return", Promise.resolve(details));

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function register(_x26, _x27, _x28, _x29) {
        return _register.apply(this, arguments);
      }

      return register;
    }()
    /**
     * Proxy to generating a new key pair using the crypto module provided.
     *
     * @returns {KeyPair} Base64URL-encoded representation of the new keypair
     */

  }, {
    key: "generateKeypair",
    value: function () {
      var _generateKeypair = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.crypto.generateKeypair());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function generateKeypair() {
        return _generateKeypair.apply(this, arguments);
      }

      return generateKeypair;
    }()
    /**
     * Proxy to generating a new signing key pair using the crypto module provided.
     *
     * @returns {KeyPair} Base64URL-encoded representation of the new keypair
     */

  }, {
    key: "generateSigningKeypair",
    value: function () {
      var _generateSigningKeypair = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.crypto.generateSigningKeypair());

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function generateSigningKeypair() {
        return _generateSigningKeypair.apply(this, arguments);
      }

      return generateSigningKeypair;
    }()
    /**
     * WriteNote is a static method that encrypts a note and sends it to TozStore,
     * allowing you to supply your own signingKey and encryptionKey pairs.
     *
     * Using this method you are not allowed to provide premium options to TozStore,
     * such as additional views, extended expiration time, etc.
     *
     * @param {object} data  A hashmap of the data to encrypt and store
     * @param {string} recipientEncryptionKey The public encryption key of the reader of this note
     * @param {string} recipientSigningKey The public signing key of the reader of this note
     * @param {KeyPair} signingKeyPair Object that has signing public and private keys
     * @param {KeyPair} encryptionKeyPair Object that has encryption public and private keys
     * @param {object} options json hashmap of a NoteOptions object, minus premium features.
     * @param {string} apiUrl Url of the TozStore api that you want to hit (Default is recommended).
     *
     * @returns {Note} A response from TozStore; the note that has been written.
     */

  }, {
    key: "writeNote",
    value: function () {
      var _writeNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(data, recipientEncryptionKey, recipientSigningKey, encryptionKeyPair, signingKeyPair, options) {
        var apiUrl,
            anonAuth,
            decodedOptions,
            _args4 = arguments;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                apiUrl = _args4.length > 6 && _args4[6] !== undefined ? _args4[6] : _constants.DEFAULT_API_URL;
                _context4.next = 3;
                return _authenticatedRequest["default"].anonymousAuth(this.crypto, signingKeyPair.publicKey, signingKeyPair.privateKey, apiUrl);

              case 3:
                anonAuth = _context4.sent;
                // Premium options are not extracted

                /* eslint-disable camelcase */
                decodedOptions = _types.NoteOptions.decode({
                  type: options.type,
                  plain: options.plain,
                  max_views: options.max_views
                });
                /* eslint-enable */

                return _context4.abrupt("return", this.internalWriteNote(anonAuth, data, recipientEncryptionKey, recipientSigningKey, encryptionKeyPair, signingKeyPair, decodedOptions, apiUrl));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function writeNote(_x30, _x31, _x32, _x33, _x34, _x35) {
        return _writeNote.apply(this, arguments);
      }

      return writeNote;
    }()
    /**
     * ReadNote is a static method used to read a note,
     * allowing you to supply your own signingKey and encryptionKey pairs.
     *
     * @param {string} noteId  UUID assigned by TozStore, used to identify a note.
     * @param {KeyPair} signingKeyPair Object that has signing public and private keys
     * @param {KeyPair} encryptionKeyPair Object that has encryption public and private keys
     * @param {string} apiUrl Url of the TozStore api that you want to hit (Default is recommended).
     *
     * @returns {Note} A note from TozStore unencrypted with the client's keys.
     */

  }, {
    key: "readNote",
    value: function () {
      var _readNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(noteId, encryptionKeyPair, signingKeyPair) {
        var apiUrl,
            anonAuth,
            _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                apiUrl = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : _constants.DEFAULT_API_URL;
                _context5.next = 3;
                return _authenticatedRequest["default"].anonymousAuth(this.crypto, signingKeyPair.publicKey, signingKeyPair.privateKey, apiUrl);

              case 3:
                anonAuth = _context5.sent;
                return _context5.abrupt("return", this.internalReadNote(anonAuth, noteId, encryptionKeyPair, apiUrl));

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function readNote(_x36, _x37, _x38) {
        return _readNote.apply(this, arguments);
      }

      return readNote;
    }()
    /**
     * ReadNoteByName is a static method used to read a note by name,
     * allowing you to supply your own signingKey and encryptionKey pairs.
     *
     * PLEASE NOTE: only notes written by a client, not the static writeNote method,
     * can have a noteName attached.
     *
     * @param {string} noteName  name given to this note with premium features
     * @param {KeyPair} signingKeyPair Object that has signing public and private keys
     * @param {KeyPair} encryptionKeyPair Object that has encryption public and private keys
     * @param {string} apiUrl Url of the TozStore api that you want to hit (Default is recommended).
     *
     * @returns {Note} A note from TozStore unencrypted with the client's keys.
     */

  }, {
    key: "readNoteByName",
    value: function () {
      var _readNoteByName = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(noteName, encryptionKeyPair, signingKeyPair) {
        var apiUrl,
            anonAuth,
            _args6 = arguments;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                apiUrl = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : _constants.DEFAULT_API_URL;
                _context6.next = 3;
                return _authenticatedRequest["default"].anonymousAuth(this.crypto, signingKeyPair.publicKey, signingKeyPair.privateKey, apiUrl);

              case 3:
                anonAuth = _context6.sent;
                return _context6.abrupt("return", this.internalReadNoteByName(anonAuth, noteName, encryptionKeyPair, apiUrl));

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function readNoteByName(_x39, _x40, _x41) {
        return _readNoteByName.apply(this, arguments);
      }

      return readNoteByName;
    }()
    /**
     * DeleteNote is a static method that deletes a note from TozStore based on the note identifier,
     * allowing you to supply your own signingKey pair.
     *
     * @param {string} noteId  UUID assigned by TozStore, used to identify a note.
     */

  }, {
    key: "deleteNote",
    value: function () {
      var _deleteNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(noteId, signingKeyPair) {
        var apiUrl,
            anonAuth,
            _args7 = arguments;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                apiUrl = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : _constants.DEFAULT_API_URL;
                _context7.next = 3;
                return _authenticatedRequest["default"].anonymousAuth(this.crypto, signingKeyPair.publicKey, signingKeyPair.privateKey, apiUrl);

              case 3:
                anonAuth = _context7.sent;
                return _context7.abrupt("return", this.internalDeleteNote(anonAuth, noteId, apiUrl));

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function deleteNote(_x42, _x43) {
        return _deleteNote.apply(this, arguments);
      }

      return deleteNote;
    }()
    /*
     * InternalWriteNote is an internal method used by writeNote
     */

  }, {
    key: "internalWriteNote",
    value: function () {
      var _internalWriteNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee8(authenticator, data, recipientEncryptionKey, recipientSigningKey, encryptionKeyPair, signingKeyPair, options, apiUrl) {
        var accessKey, encryptedAccessKey, noteData, noteKeys, signableNote, signature, unencryptedNote, encryptedNote, response, storedNoteResp, noteJson, decodedServerNote;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.crypto.randomKey();

              case 2:
                accessKey = _context8.sent;
                _context8.next = 5;
                return this.crypto.encryptAk(encryptionKeyPair.privateKey, accessKey, recipientEncryptionKey);

              case 5:
                encryptedAccessKey = _context8.sent;
                noteData = new _types.NoteData(data);
                noteKeys = new _types.NoteKeys(this.crypto.mode(), recipientSigningKey, signingKeyPair.publicKey, encryptionKeyPair.publicKey, encryptedAccessKey);
                signableNote = new _types.NoteInfo(noteData, noteKeys, options);
                _context8.next = 11;
                return this.crypto.signDocument(signableNote, signingKeyPair.privateKey);

              case 11:
                signature = _context8.sent;
                unencryptedNote = new _types.Note(noteData, noteKeys, signature, options);
                _context8.next = 15;
                return this.crypto.encryptNote(unencryptedNote, accessKey);

              case 15:
                encryptedNote = _context8.sent;
                _context8.next = 18;
                return authenticator.tsv1Fetch(apiUrl + '/v2/storage/notes', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: encryptedNote.toJson()
                }, options.clientId);

              case 18:
                response = _context8.sent;
                _context8.next = 21;
                return (0, _utils.checkStatus)(response);

              case 21:
                storedNoteResp = _context8.sent;
                _context8.next = 24;
                return storedNoteResp.json();

              case 24:
                noteJson = _context8.sent;
                decodedServerNote = _types.Note.decode(noteJson);
                return _context8.abrupt("return", decodedServerNote);

              case 27:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function internalWriteNote(_x44, _x45, _x46, _x47, _x48, _x49, _x50, _x51) {
        return _internalWriteNote.apply(this, arguments);
      }

      return internalWriteNote;
    }()
    /*
     * InternalReadNote is an internal method used by internalReadNote
     */

  }, {
    key: "internalReadNote",
    value: function () {
      var _internalReadNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee9(authenticator, noteId, encryptionKeyPair, apiUrl) {
        var request, storedNote, noteJson;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return authenticator.tsv1Fetch(apiUrl + "/v2/storage/notes?note_id=".concat(noteId), {
                  method: 'GET'
                });

              case 2:
                request = _context9.sent;
                _context9.next = 5;
                return (0, _utils.checkStatus)(request);

              case 5:
                storedNote = _context9.sent;
                _context9.next = 8;
                return storedNote.json();

              case 8:
                noteJson = _context9.sent;
                return _context9.abrupt("return", this.decryptNoteJson(noteJson, encryptionKeyPair.privateKey, noteJson.writer_encryption_key, noteJson.writer_signing_key));

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function internalReadNote(_x52, _x53, _x54, _x55) {
        return _internalReadNote.apply(this, arguments);
      }

      return internalReadNote;
    }()
    /*
     * InternalReadNoteByName is an internal method used by readNoteByName
     */

  }, {
    key: "internalReadNoteByName",
    value: function () {
      var _internalReadNoteByName = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee10(authenticator, noteName, encryptionKeyPair, apiUrl) {
        var request, storedNote, noteJson;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return authenticator.tsv1Fetch(apiUrl + "/v2/storage/notes?id_string=".concat(noteName), {
                  method: 'GET'
                });

              case 2:
                request = _context10.sent;
                _context10.next = 5;
                return (0, _utils.checkStatus)(request);

              case 5:
                storedNote = _context10.sent;
                _context10.next = 8;
                return storedNote.json();

              case 8:
                noteJson = _context10.sent;
                return _context10.abrupt("return", this.decryptNoteJson(noteJson, encryptionKeyPair.privateKey, noteJson.writer_encryption_key, noteJson.writer_signing_key));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function internalReadNoteByName(_x56, _x57, _x58, _x59) {
        return _internalReadNoteByName.apply(this, arguments);
      }

      return internalReadNoteByName;
    }()
    /*
     * InternalDeleteNote is an internal method used by deleteNote
     */

  }, {
    key: "internalDeleteNote",
    value: function () {
      var _internalDeleteNote = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee11(authenticator, noteId, apiUrl) {
        var deletedNoteResponse;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return authenticator.tsv1Fetch(apiUrl + "/v2/storage/notes/".concat(noteId), {
                  method: 'DELETE'
                });

              case 2:
                deletedNoteResponse = _context11.sent;
                return _context11.abrupt("return", (0, _utils.checkStatus)(deletedNoteResponse));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function internalDeleteNote(_x60, _x61, _x62) {
        return _internalDeleteNote.apply(this, arguments);
      }

      return internalDeleteNote;
    }()
    /*
     * Decrypts and validates a note response from TozStore given the proper keys.
     */

  }, {
    key: "decryptNoteJson",
    value: function () {
      var _decryptNoteJson = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee12(noteJson, privateKey, publicKey, publicSigningKey) {
        var encryptedNote, eak, ak, decryptedNote, signableNote, signed, verify;
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                encryptedNote = _types.Note.decode(noteJson);
                eak = noteJson.encrypted_access_key;
                _context12.next = 4;
                return this.crypto.decryptNoteEak(privateKey, {
                  eak: eak
                }, publicKey);

              case 4:
                ak = _context12.sent;
                _context12.next = 7;
                return this.crypto.decryptNote(encryptedNote, ak);

              case 7:
                decryptedNote = _context12.sent;
                signableNote = _types.NoteInfo.signableSubsetFromNote(decryptedNote);
                signed = new _types.SignedDocument(signableNote, decryptedNote.signature);
                _context12.next = 12;
                return this.verify(signed, publicSigningKey);

              case 12:
                verify = _context12.sent;

                if (verify) {
                  _context12.next = 15;
                  break;
                }

                throw new Error('Note failed verification');

              case 15:
                return _context12.abrupt("return", decryptedNote);

              case 16:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function decryptNoteJson(_x63, _x64, _x65, _x66) {
        return _decryptNoteJson.apply(this, arguments);
      }

      return decryptNoteJson;
    }()
  }]);

  function Client(config) {
    var _this;

    (0, _classCallCheck2["default"])(this, Client);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Client).call(this));

    if (!(config instanceof _config["default"])) {
      throw new Error('Config must be a valid Config object');
    }

    _this.config = config;
    _this.authenticator = new _authenticatedRequest["default"](config, _this.crypto);
    _this._akCache = {};
    return _this;
  }
  /**
   * Get an access key from the cache if it exists, otherwise decrypt
   * the provided EAK and populate the cache.
   *
   * @param {string}  writerId
   * @param {string}  userId
   * @param {string}  readerId
   * @param {string}  type
   * @param {EAKInfo} eak
   *
   * @returns {Promise<string>}
   */


  (0, _createClass2["default"])(Client, [{
    key: "_getCachedAk",
    value: function () {
      var _getCachedAk2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee13(writerId, userId, readerId, type, eak) {
        var cacheKey, ak;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                cacheKey = "".concat(writerId, ".").concat(userId, ".").concat(type);
                ak = this._akCache[cacheKey];

                if (!(ak === undefined)) {
                  _context13.next = 7;
                  break;
                }

                _context13.next = 5;
                return this.crypto.decryptEak(this.config.privateKey, eak);

              case 5:
                ak = _context13.sent;
                this._akCache[cacheKey] = ak;

              case 7:
                return _context13.abrupt("return", Promise.resolve(ak));

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function _getCachedAk(_x67, _x68, _x69, _x70, _x71) {
        return _getCachedAk2.apply(this, arguments);
      }

      return _getCachedAk;
    }()
    /**
     * Get a client's information based on their ID.
     *
     * @param {string} clientId UUID of the client to fetch
     *
     * @returns {Promise<ClientInfo>}
     */

  }, {
    key: "getClient",
    value: function () {
      var _getClient = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee14(clientId) {
        var request, response, json;
        return _regenerator["default"].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/clients/' + clientId, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 2:
                request = _context14.sent;
                _context14.next = 5;
                return (0, _utils.checkStatus)(request);

              case 5:
                response = _context14.sent;
                _context14.next = 8;
                return response.json();

              case 8:
                json = _context14.sent;
                return _context14.abrupt("return", _types.ClientInfo.decode(json));

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getClient(_x72) {
        return _getClient.apply(this, arguments);
      }

      return getClient;
    }()
    /**
     * Create a key for the current client as a writer if one does not exist
     * in the cache already. If no access key does exist, create a random one
     * and store it with the server.
     *
     * @param {string} type Record type for this key
     *
     * @returns {Promise<EAKInfo>}
     */

  }, {
    key: "createWriterKey",
    value: function () {
      var _createWriterKey = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee15(type) {
        var ak, eak;
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return getAccessKey(this, this.config.clientId, this.config.clientId, this.config.clientId, type);

              case 2:
                ak = _context15.sent;

                if (!(ak === null)) {
                  _context15.next = 9;
                  break;
                }

                _context15.next = 6;
                return this.crypto.randomKey();

              case 6:
                ak = _context15.sent;
                _context15.next = 9;
                return putAccessKey(this, this.config.clientId, this.config.clientId, this.config.clientId, type, ak);

              case 9:
                _context15.next = 11;
                return this.crypto.encryptAk(this.config.privateKey, ak, this.config.publicKey);

              case 11:
                eak = _context15.sent;
                return _context15.abrupt("return", new _types.EAKInfo(eak, this.config.clientId, this.config.publicKey, this.config.clientId, this.config.publicSigningKey));

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function createWriterKey(_x73) {
        return _createWriterKey.apply(this, arguments);
      }

      return createWriterKey;
    }()
    /**
     * Get a key for the current client as the reader of a specific record written by someone else.
     *
     * @param {string} writerId Writer of the record in the database
     * @param {string} userID   Subject of the record in the database
     * @param {string} type     Type of record
     *
     * @returns {Promise<EAKInfo>}
     */

  }, {
    key: "getReaderKey",
    value: function () {
      var _getReaderKey = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee16(writerId, userId, type) {
        return _regenerator["default"].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", getEncryptedAccessKey(this, writerId, userId, this.config.clientId, type));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getReaderKey(_x74, _x75, _x76) {
        return _getReaderKey.apply(this, arguments);
      }

      return getReaderKey;
    }()
    /**
     * Retrieve information about a client, primarily its UUID and public key,
     * based either on an already-known client ID or a discoverable client
     * email address.
     *
     * @param {string} clientId
     *
     * @returns {Promise<ClientInfo>}
     */

  }, {
    key: "clientInfo",
    value: function () {
      var _clientInfo = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee17(clientId) {
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!_constants.EMAIL.test(clientId)) {
                  _context17.next = 2;
                  break;
                }

                throw new Error('Client discovery by email address is not supported');

              case 2:
                return _context17.abrupt("return", this.getClient(clientId));

              case 3:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function clientInfo(_x77) {
        return _clientInfo.apply(this, arguments);
      }

      return clientInfo;
    }()
    /**
     * Retrieve the Curve 25519 public key associated with a known client.
     *
     * @param {string} clientId
     *
     * @returns {Promise<PublicKey>}
     */

  }, {
    key: "clientKey",
    value: function () {
      var _clientKey = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee18(clientId) {
        var info;
        return _regenerator["default"].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (!(clientId === this.clientId)) {
                  _context18.next = 2;
                  break;
                }

                return _context18.abrupt("return", Promise.resolve(null));

              case 2:
                _context18.next = 4;
                return this.clientInfo(clientId);

              case 4:
                info = _context18.sent;
                return _context18.abrupt("return", Promise.resolve(info.publicKey));

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function clientKey(_x78) {
        return _clientKey.apply(this, arguments);
      }

      return clientKey;
    }()
    /**
     * Reads a record from the E3DB system and decrypts it automatically.
     *
     * @param {string} recordId
     * @param {array}  [fields] Optional fields to select on the record
     *
     * @returns {Promise<Record>}
     */

  }, {
    key: "read",
    value: function () {
      var _read = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee19(recordId) {
        var fields,
            path,
            mapped,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            field,
            request,
            response,
            json,
            record,
            _args19 = arguments;

        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                fields = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : null;
                path = this.config.apiUrl + '/v1/storage/records/' + recordId;

                if (!(fields !== null)) {
                  _context19.next = 24;
                  break;
                }

                mapped = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context19.prev = 7;

                for (_iterator = fields[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  field = _step.value;
                  mapped.push('field=' + field);
                }

                _context19.next = 15;
                break;

              case 11:
                _context19.prev = 11;
                _context19.t0 = _context19["catch"](7);
                _didIteratorError = true;
                _iteratorError = _context19.t0;

              case 15:
                _context19.prev = 15;
                _context19.prev = 16;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 18:
                _context19.prev = 18;

                if (!_didIteratorError) {
                  _context19.next = 21;
                  break;
                }

                throw _iteratorError;

              case 21:
                return _context19.finish(18);

              case 22:
                return _context19.finish(15);

              case 23:
                path += '?' + mapped.join('&');

              case 24:
                _context19.next = 26;
                return this.authenticator.tokenFetch(path, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 26:
                request = _context19.sent;
                _context19.next = 29;
                return (0, _utils.checkStatus)(request);

              case 29:
                response = _context19.sent;
                _context19.next = 32;
                return response.json();

              case 32:
                json = _context19.sent;
                _context19.next = 35;
                return _types.Record.decode(json);

              case 35:
                record = _context19.sent;
                return _context19.abrupt("return", decryptRecord(this, record));

              case 37:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this, [[7, 11, 15, 23], [16,, 18, 22]]);
      }));

      function read(_x79) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
    /**
     * Create a new record entry with E3DB.
     *
     * @param {string} type  The content type with which to associate the record.
     * @param {object} data  A hashmap of the data to encrypt and store
     * @param {object} plain Optional hashmap of data to store with the record's meta in plaintext
     *
     * @return {Promise<Record>}
     */

  }, {
    key: "write",
    value: function () {
      var _write = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee20(type, data) {
        var plain,
            meta,
            info,
            signature,
            record,
            encrypted,
            _args20 = arguments;
        return _regenerator["default"].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                plain = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};

                // Build the record
                if (data instanceof Object) {
                  data = new _types.RecordData(data);
                }

                meta = new _types.Meta(this.config.clientId, this.config.clientId, type, plain);
                info = new _types.RecordInfo(meta, data);

                if (!(this.config.version > 1)) {
                  _context20.next = 10;
                  break;
                }

                _context20.next = 7;
                return this.sign(info);

              case 7:
                _context20.t0 = _context20.sent;
                _context20.next = 11;
                break;

              case 10:
                _context20.t0 = null;

              case 11:
                signature = _context20.t0;
                record = new _types.Record(meta, data, signature);
                _context20.next = 15;
                return encryptRecord(this, record);

              case 15:
                encrypted = _context20.sent;
                return _context20.abrupt("return", this.writeRaw(encrypted));

              case 17:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function write(_x80, _x81) {
        return _write.apply(this, arguments);
      }

      return write;
    }()
    /**
     * Write a previously stored encrypted/signed record directly to E3DB.
     *
     * @param {Record} record The fully-constructed record object, as returned by `encrypt()`
     *
     * @return {Promise<Record>}
     */

  }, {
    key: "writeRaw",
    value: function () {
      var _writeRaw = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee21(record) {
        var request, response, json, written;
        return _regenerator["default"].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (record instanceof _types.Record) {
                  _context21.next = 2;
                  break;
                }

                throw new Error('Can only write encrypted/signed records directly to the server!');

              case 2:
                _context21.next = 4;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/records', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: record.stringify()
                });

              case 4:
                request = _context21.sent;
                _context21.next = 7;
                return (0, _utils.checkStatus)(request);

              case 7:
                response = _context21.sent;
                _context21.next = 10;
                return response.json();

              case 10:
                json = _context21.sent;
                _context21.next = 13;
                return _types.Record.decode(json);

              case 13:
                written = _context21.sent;
                return _context21.abrupt("return", decryptRecord(this, written));

              case 15:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function writeRaw(_x82) {
        return _writeRaw.apply(this, arguments);
      }

      return writeRaw;
    }()
    /**
     * Encrypt a plaintext record using the AK wrapped and encrypted for the current
     * client. The key will be cached for future use.
     *
     * @param {string}            type  The content type with which to associate the record.
     * @param {RecordData|object} data  A hashmap of the data to encrypt and store
     * @param {object}            eak   Encrypted access key instance
     * @param {object}            plain Optional hashmap of data to store with the record's meta in plaintext
     *
     * @returns {Promise<Record>}
     */

  }, {
    key: "localEncrypt",
    value: function () {
      var _localEncrypt = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee22(type, data, eak) {
        var plain,
            ak,
            meta,
            recordInfo,
            signature,
            record,
            _args22 = arguments;
        return _regenerator["default"].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                plain = _args22.length > 3 && _args22[3] !== undefined ? _args22[3] : {};
                _context22.next = 3;
                return this._getCachedAk(this.config.clientId, this.config.clientId, this.config.clientId, type, eak);

              case 3:
                ak = _context22.sent;

                if (data instanceof Object) {
                  data = new _types.RecordData(data);
                } // Build the record


                meta = new _types.Meta(this.config.clientId, this.config.clientId, type, plain);
                recordInfo = new _types.RecordInfo(meta, data);

                if (!(this.config.version > 1)) {
                  _context22.next = 13;
                  break;
                }

                _context22.next = 10;
                return this.sign(recordInfo);

              case 10:
                _context22.t0 = _context22.sent;
                _context22.next = 14;
                break;

              case 13:
                _context22.t0 = null;

              case 14:
                signature = _context22.t0;
                record = new _types.Record(meta, data, signature);
                return _context22.abrupt("return", this.crypto.encryptRecord(record, ak));

              case 17:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function localEncrypt(_x83, _x84, _x85) {
        return _localEncrypt.apply(this, arguments);
      }

      return localEncrypt;
    }()
    /**
     * Sign a document and return the signature
     *
     * @param {Signable} document Serializable object to be signed.
     *
     * @returns {Promise<string>}
     */

  }, {
    key: "sign",
    value: function () {
      var _sign = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee23(document) {
        return _regenerator["default"].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                if (!(this.config.version === 1)) {
                  _context23.next = 2;
                  break;
                }

                throw new Error('Cannot sign documents without a signing key!');

              case 2:
                return _context23.abrupt("return", this.crypto.signDocument(document, this.config.privateSigningKey));

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function sign(_x86) {
        return _sign.apply(this, arguments);
      }

      return sign;
    }()
    /**
     * Decrypt an encrypted record using the AK wrapped and encrypted for the current
     * client. The key will be cached for future use.
     *
     * @param {Record}  record Record instance with encrypted data for decryption
     * @param {EAKInfo} eak    Encrypted access key instance
     *
     * @returns {Promise<Record>}
     */

  }, {
    key: "localDecrypt",
    value: function () {
      var _localDecrypt = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee24(record, eak) {
        var ak, decrypted, info, signed, verify;
        return _regenerator["default"].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                if (!(eak.signerSigningKey === null)) {
                  _context24.next = 2;
                  break;
                }

                throw new Error('EAKInfo has no signing key!');

              case 2:
                _context24.next = 4;
                return this._getCachedAk(record.meta.writerId, record.meta.userId, this.config.clientId, record.meta.type, eak);

              case 4:
                ak = _context24.sent;
                _context24.next = 7;
                return this.crypto.decryptRecord(record, ak);

              case 7:
                decrypted = _context24.sent;
                info = new _types.RecordInfo(decrypted.meta, decrypted.data);
                signed = new _types.SignedDocument(info, decrypted.signature); // Use this.constructor to ensure the implementing class's crypto is available

                _context24.next = 12;
                return this.constructor.verify(signed, eak.signerSigningKey.ed25519);

              case 12:
                verify = _context24.sent;

                if (verify) {
                  _context24.next = 15;
                  break;
                }

                throw new Error('Document failed verification');

              case 15:
                return _context24.abrupt("return", decrypted);

              case 16:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function localDecrypt(_x87, _x88) {
        return _localDecrypt.apply(this, arguments);
      }

      return localDecrypt;
    }()
    /**
     * Verify the signature attached to a specific document.
     *
     * @param {SignedDocument} signed        Document with an attached signature
     * @param {string}         publicSignKey Key to use during signature verification
     *
     * @returns {Promise<bool>}
     */

  }, {
    key: "update",

    /**
     * Update a record, with optimistic concurrent locking, that already exists in the E3DB system.
     *
     * @param {Record} record Record to be updated.
     *
     * @returns {Promise<Record>} Updated record
     */
    value: function () {
      var _update = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee25(record) {
        var _this2 = this;

        var recordId, version, recordInfo, encrypted;
        return _regenerator["default"].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                recordId = record.meta.recordId;
                version = record.meta.version; // Update record signature

                recordInfo = new _types.RecordInfo(record.meta, record.data);

                if (!(this.config.version > 1)) {
                  _context25.next = 9;
                  break;
                }

                _context25.next = 6;
                return this.sign(recordInfo);

              case 6:
                _context25.t0 = _context25.sent;
                _context25.next = 10;
                break;

              case 9:
                _context25.t0 = null;

              case 10:
                record.signature = _context25.t0;
                _context25.next = 13;
                return encryptRecord(this, record);

              case 13:
                encrypted = _context25.sent;
                return _context25.abrupt("return", this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/records/safe/' + recordId + '/' + version, {
                  method: 'PUT',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: encrypted.stringify()
                }).then(_utils.checkStatus).then(function (response) {
                  return response.json();
                }).then(_types.Record.decode).then(function (rec) {
                  return rec;
                }).then(function (record) {
                  return decryptRecord(_this2, record);
                }));

              case 15:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function update(_x89) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
    /**
     * Deletes a record from the E3DB system
     *
     * @param {string} recordId  ID of the record to remove
     * @param {string} [version] Optional version ID to remove safely
     *
     * @returns {Promise<bool>}
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee26(recordId) {
        var version,
            url,
            response,
            _args26 = arguments;
        return _regenerator["default"].wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                version = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : null;
                url = this.config.apiUrl + '/v1/storage/records/' + recordId;

                if (version !== null) {
                  url = this.config.apiUrl + '/v1/storage/records/safe/' + recordId + '/' + version;
                }

                _context26.next = 5;
                return this.authenticator.tokenFetch(url, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 5:
                response = _context26.sent;
                _context26.t0 = response.status;
                _context26.next = _context26.t0 === 204 ? 9 : _context26.t0 === 403 ? 9 : _context26.t0 === 409 ? 10 : 11;
                break;

              case 9:
                return _context26.abrupt("return", Promise.resolve(true));

              case 10:
                throw new Error('Conflict');

              case 11:
                throw new Error('Error while deleting record data!');

              case 12:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function _delete(_x90) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Back up the client's configuration to E3DB in a serialized format that can be read
     * by the Admin Console. The stored configuration will be shared with the specified client,
     * and the account service notified that the sharing has taken place.
     *
     * @param {string} clientId          Unique ID of the client to which we're backing up
     * @param {string} registrationToken Original registration token used to create the client
     *
     * @returns {Promise<bool>}
     */

  }, {
    key: "backup",
    value: function () {
      var _backup = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee27(clientId, registrationToken) {
        var credentials;
        return _regenerator["default"].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                /* eslint-disable camelcase */
                credentials = {
                  version: '"' + this.config.version.toString() + '"',
                  client_id: '"' + this.config.clientId + '"',
                  api_key_id: '"' + this.config.apiKeyId + '"',
                  api_secret: '"' + this.config.apiSecret + '"',
                  client_email: '""',
                  public_key: '"' + this.config.publicKey + '"',
                  private_key: '"' + this.config.privateKey + '"'
                };

                if (this.config.version === 2) {
                  credentials.public_signing_key = '"' + this.config.publicSigningKey + '"';
                  credentials.private_signing_key = '"' + this.config.privateSigningKey + '"';
                }

                credentials.api_url = '"' + this.config.apiUrl + '"';
                /* eslint-enable */

                _context27.next = 5;
                return this.write('tozny.key_backup', credentials, {
                  client: this.config.clientId
                });

              case 5:
                _context27.next = 7;
                return this.share('tozny.key_backup', clientId);

              case 7:
                _context27.next = 9;
                return fetch(this.config.apiUrl + '/v1/account/backup/' + registrationToken + '/' + this.config.clientId, {
                  method: 'POST'
                });

              case 9:
                return _context27.abrupt("return", Promise.resolve(true));

              case 10:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function backup(_x91, _x92) {
        return _backup.apply(this, arguments);
      }

      return backup;
    }()
    /**
     * Query E3DB records according to a set of selection criteria.
     *
     * The default behavior is to return all records written by the
     * current authenticated client.
     *
     * To restrict the results to a particular type, pass a type or
     * list of types as the `type` argument.
     *
     * To restrict the results to a set of clients, pass a single or
     * list of client IDs as the `writer` argument. To list records
     * written by any client that has shared with the current client,
     * pass the special string 'all' as the `writer` argument.
     *
     * @param {bool}         data     Flag to include data in records
     * @param {string|array} writer   Select records written by a single writer, a list of writers, or 'all'
     * @param {string|array} record   Select a single record or list of records
     * @param {string|array} type     Select records of a single type or a list of types
     * @param {array}        plain    Associative array of plaintext meta to use as a filter
     * @param {number}       pageSize Number of records to fetch per request
     *
     * @returns {QueryResult}
     */

  }, {
    key: "query",
    value: function query() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var record = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var plain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var pageSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _constants.DEFAULT_QUERY_COUNT;
      var allWriters = false;

      if (writer === 'all') {
        allWriters = true;
        writer = [];
      }

      var query = new _types.Query(0, data, writer, record, type, plain, null, pageSize, allWriters);
      return new _types.QueryResult(this, query);
    }
    /**
     * Internal-only method to execute a query against the server and parse the response.
     *
     * @param {Query} query Query request to execute against the server
     *
     * @returns {QueryResult}
     */

  }, {
    key: "_query",
    value: function () {
      var _query2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee28(query) {
        var response;
        return _regenerator["default"].wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/search', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: query.stringify()
                });

              case 2:
                response = _context28.sent;
                _context28.next = 5;
                return (0, _utils.checkStatus)(response);

              case 5:
                return _context28.abrupt("return", response.json());

              case 6:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function _query(_x93) {
        return _query2.apply(this, arguments);
      }

      return _query;
    }()
    /**
     * Grant another E3DB client access to records of a particular type.
     *
     * @param {string} type     Type of records to share
     * @param {string} readerId Client ID or email address of reader to grant access to
     *
     * @returns {Promise<bool>}
     */

  }, {
    key: "share",
    value: function () {
      var _share = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee29(type, readerId) {
        var clientInfo, clientId, ak, policy, request;
        return _regenerator["default"].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                if (!(readerId === this.config.clientId)) {
                  _context29.next = 2;
                  break;
                }

                return _context29.abrupt("return", Promise.resolve(true));

              case 2:
                if (!_constants.EMAIL.test(readerId)) {
                  _context29.next = 7;
                  break;
                }

                _context29.next = 5;
                return this.clientInfo(readerId);

              case 5:
                clientInfo = _context29.sent;
                return _context29.abrupt("return", this.share(type, clientInfo.clientId));

              case 7:
                clientId = this.config.clientId;
                _context29.next = 10;
                return getAccessKey(this, clientId, clientId, clientId, type);

              case 10:
                ak = _context29.sent;

                if (!(ak === null)) {
                  _context29.next = 17;
                  break;
                }

                _context29.next = 14;
                return this.crypto.randomKey();

              case 14:
                ak = _context29.sent;
                _context29.next = 17;
                return putAccessKey(this, this.config.clientId, this.config.clientId, this.config.clientId, type, ak);

              case 17:
                _context29.next = 19;
                return putAccessKey(this, clientId, clientId, readerId, type, ak);

              case 19:
                policy = {
                  allow: [{
                    read: {}
                  }]
                };
                _context29.next = 22;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/policy/' + clientId + '/' + clientId + '/' + readerId + '/' + type, {
                  method: 'PUT',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(policy)
                });

              case 22:
                request = _context29.sent;
                _context29.next = 25;
                return (0, _utils.checkStatus)(request);

              case 25:
                return _context29.abrupt("return", Promise.resolve(true));

              case 26:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function share(_x94, _x95) {
        return _share.apply(this, arguments);
      }

      return share;
    }()
    /**
     * Revoke another E3DB client's access to records of a particular type.
     *
     * @param {string} type     Type of records to share
     * @param {string} readerId Client ID or email address of reader to grant access from
     *
     * @returns {Promise<bool>}
     */

  }, {
    key: "revoke",
    value: function () {
      var _revoke = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee30(type, readerId) {
        var clientInfo, clientId, policy, request;
        return _regenerator["default"].wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                if (!(readerId === this.config.clientId)) {
                  _context30.next = 2;
                  break;
                }

                return _context30.abrupt("return", Promise.resolve(true));

              case 2:
                if (!_constants.EMAIL.test(readerId)) {
                  _context30.next = 7;
                  break;
                }

                _context30.next = 5;
                return this.clientInfo(readerId);

              case 5:
                clientInfo = _context30.sent;
                return _context30.abrupt("return", this.revoke(type, clientInfo.clientId));

              case 7:
                clientId = this.config.clientId;
                policy = {
                  deny: [{
                    read: {}
                  }]
                };
                _context30.next = 11;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/policy/' + clientId + '/' + clientId + '/' + readerId + '/' + type, {
                  method: 'PUT',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(policy)
                });

              case 11:
                request = _context30.sent;
                _context30.next = 14;
                return (0, _utils.checkStatus)(request);

              case 14:
                _context30.next = 16;
                return deleteAccessKey(this, clientId, clientId, readerId, type);

              case 16:
                return _context30.abrupt("return", Promise.resolve(true));

              case 17:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function revoke(_x96, _x97) {
        return _revoke.apply(this, arguments);
      }

      return revoke;
    }()
    /**
     * Get a list of all outgoing sharing policy relationships
     *
     * @returns {Promise<array>}
     */

  }, {
    key: "outgoingSharing",
    value: function () {
      var _outgoingSharing = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee31() {
        var request, response, json;
        return _regenerator["default"].wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/policy/outgoing', {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 2:
                request = _context31.sent;
                _context31.next = 5;
                return (0, _utils.checkStatus)(request);

              case 5:
                response = _context31.sent;
                _context31.next = 8;
                return response.json();

              case 8:
                json = _context31.sent;
                return _context31.abrupt("return", Promise.all(json.map(_types.OutgoingSharingPolicy.decode)));

              case 10:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function outgoingSharing() {
        return _outgoingSharing.apply(this, arguments);
      }

      return outgoingSharing;
    }()
    /**
     * Get a list of all incoming sharing policy relationships
     *
     * @returns {Promise<array>}
     */

  }, {
    key: "incomingSharing",
    value: function () {
      var _incomingSharing = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee32() {
        var request, response, json;
        return _regenerator["default"].wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/policy/incoming', {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 2:
                request = _context32.sent;
                _context32.next = 5;
                return (0, _utils.checkStatus)(request);

              case 5:
                response = _context32.sent;
                _context32.next = 8;
                return response.json();

              case 8:
                json = _context32.sent;
                return _context32.abrupt("return", Promise.all(json.map(_types.IncomingSharingPolicy.decode)));

              case 10:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function incomingSharing() {
        return _incomingSharing.apply(this, arguments);
      }

      return incomingSharing;
    }()
  }, {
    key: "writeLargeFile",
    value: function () {
      var _writeLargeFile = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee33(recordType, fileObject) {
        var plainMetadata,
            clientId,
            ak,
            _ref,
            _ref2,
            encryptedFile,
            checkSum,
            encryptedLength,
            fileCompression,
            fileObj,
            postBody,
            postRequest,
            postResponse,
            postJson,
            putRequest,
            patchRequest,
            patchResponse,
            patchJson,
            _args33 = arguments;

        return _regenerator["default"].wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                plainMetadata = _args33.length > 2 && _args33[2] !== undefined ? _args33[2] : {};
                clientId = this.config.clientId;
                _context33.next = 4;
                return getAccessKey(this, clientId, clientId, clientId, recordType);

              case 4:
                ak = _context33.sent;

                if (!(ak === null)) {
                  _context33.next = 11;
                  break;
                }

                _context33.next = 8;
                return this.crypto.randomKey();

              case 8:
                ak = _context33.sent;
                _context33.next = 11;
                return putAccessKey(this, clientId, clientId, clientId, recordType, ak);

              case 11:
                _context33.next = 13;
                return this.crypto.encryptLargeFile(fileObject, ak, plainMetadata);

              case 13:
                _ref = _context33.sent;
                _ref2 = (0, _slicedToArray2["default"])(_ref, 3);
                encryptedFile = _ref2[0];
                checkSum = _ref2[1];
                encryptedLength = _ref2[2];
                fileCompression = 'raw';
                fileObj = new _types.File(checkSum, fileCompression, encryptedLength, this.config.clientId, this.config.clientId, recordType, plainMetadata);
                postBody = fileObj.toJson(); // Post file meta to request AWS S3 Bucket URL.

                _context33.next = 23;
                return this.authenticator.tokenFetch(this.config.apiUrl + '/v1/storage/files', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(postBody)
                });

              case 23:
                postRequest = _context33.sent;
                _context33.next = 26;
                return (0, _utils.checkStatus)(postRequest);

              case 26:
                postResponse = _context33.sent;
                _context33.next = 29;
                return postResponse.json();

              case 29:
                postJson = _context33.sent;
                fileObj.fileUrl = postJson.file_url;
                fileObj.recordId = postJson.id; // Upload encrypted file to AWS S3 Bucket.

                _context33.next = 34;
                return fetch(fileObj.fileUrl, {
                  method: 'PUT',
                  headers: {
                    'Content-Type': 'application/octet-stream',
                    'Content-MD5': checkSum
                  },
                  body: encryptedFile
                });

              case 34:
                putRequest = _context33.sent;
                _context33.next = 37;
                return (0, _utils.checkStatus)(putRequest);

              case 37:
                _context33.next = 39;
                return this.authenticator.tokenFetch(this.config.apiUrl + "/v1/storage/files/".concat(fileObj.recordId), {
                  method: 'PATCH',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 39:
                patchRequest = _context33.sent;
                _context33.next = 42;
                return (0, _utils.checkStatus)(patchRequest);

              case 42:
                patchResponse = _context33.sent;
                _context33.next = 45;
                return patchResponse.json();

              case 45:
                patchJson = _context33.sent;
                return _context33.abrupt("return", new _types.File(patchJson.meta.file_meta.checksum, patchJson.meta.file_meta.compression, patchJson.meta.file_meta.size, patchJson.meta.writer_id, patchJson.meta.user_id, patchJson.meta.type, patchJson.meta.plain, patchJson.meta.file_meta.file_url, patchJson.meta.file_meta.file_name, patchJson.meta.record_id, patchJson.meta.created, patchJson.meta.last_modified, patchJson.meta.version));

              case 47:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function writeLargeFile(_x98, _x99) {
        return _writeLargeFile.apply(this, arguments);
      }

      return writeLargeFile;
    }() // The file_url appears to be null.  Is that right?

  }, {
    key: "readLargeFile",
    value: function () {
      var _readLargeFile = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee34(recordId, destinationFilename) {
        var getRequest, getResponse, getJson, fileObj, ak, fileRequest, fileResponse, encryptedFileArrayBuffer, fileName, decrypted;
        return _regenerator["default"].wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.authenticator.tokenFetch(this.config.apiUrl + "/v1/storage/files/".concat(recordId), {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

              case 2:
                getRequest = _context34.sent;
                _context34.next = 5;
                return (0, _utils.checkStatus)(getRequest);

              case 5:
                getResponse = _context34.sent;
                _context34.next = 8;
                return getResponse.json();

              case 8:
                getJson = _context34.sent;
                // Create File instance.
                fileObj = new _types.File(getJson.meta.file_meta.checksum, getJson.meta.file_meta.compression, getJson.meta.file_meta.size, getJson.meta.writer_id, getJson.meta.user_id, getJson.meta.type, getJson.meta.plain, getJson.meta.file_meta.file_url, getJson.meta.file_meta.file_name, getJson.meta.record_id, getJson.meta.created, getJson.meta.last_modified, getJson.meta.version); // Get the access key to decrypt the record.

                _context34.next = 12;
                return getAccessKey(this, fileObj.writerId, this.config.clientId, fileObj.writerId, fileObj.recordType);

              case 12:
                ak = _context34.sent;

                if (!(ak === null)) {
                  _context34.next = 15;
                  break;
                }

                throw new Error("Can't read records of type ".concat(fileObj.type));

              case 15:
                _context34.next = 17;
                return fetch(fileObj.fileUrl, {
                  method: 'GET'
                });

              case 17:
                fileRequest = _context34.sent;
                _context34.next = 20;
                return (0, _utils.checkStatus)(fileRequest);

              case 20:
                fileResponse = _context34.sent;
                _context34.next = 23;
                return fileResponse.arrayBuffer();

              case 23:
                encryptedFileArrayBuffer = _context34.sent;
                // Should take the encryptedFileName and destinationFileName
                fileName = destinationFilename ? destinationFilename : getJson.meta.file_meta.file_name;
                _context34.next = 27;
                return this.crypto.decryptFile(fileName, ak, encryptedFileArrayBuffer);

              case 27:
                decrypted = _context34.sent;
                return _context34.abrupt("return", [decrypted, fileObj]);

              case 29:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function readLargeFile(_x100, _x101) {
        return _readLargeFile.apply(this, arguments);
      }

      return readLargeFile;
    }()
    /**
     * WriteNote is a static method that encrypts a note and sends it to TozStore,
     * allowing you to supply your own signingKey and encryptionKey pairs.
     *
     * Using this method you are not allowed to provide premium options to TozStore,
     * such as additional views, extended expiration time, etc.
     *
     * @param {object} data  A hashmap of the data to encrypt and store
     * @param {string} recipientEncryptionKey The public encryption key of the reader of this note
     * @param {string} recipientSigningKey signing key of the reader of this note
     * @param {object} options json hashmap of a NoteOptions object.
     *
     * @returns {Note} A response from TozStore; the note that has been written.
     */

  }, {
    key: "writeNote",
    value: function () {
      var _writeNote2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee35(data, recipientEncryptionKey, recipientSigningKey, options) {
        var decodedOptions, encryptionKeys, signingKeys;
        return _regenerator["default"].wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                // Automatically mix in the client id unless it is overridden in the provided options.

                /* eslint-disable camelcase */
                decodedOptions = _types.NoteOptions.decode(Object.assign({
                  client_id: this.config.clientId
                }, options));
                /* eslint-enable */

                encryptionKeys = new _types.KeyPair(this.config.publicKey, this.config.privateKey);
                signingKeys = new _types.KeyPair(this.config.publicSigningKey, this.config.privateSigningKey);
                return _context35.abrupt("return", this.constructor.internalWriteNote(this.authenticator, data, recipientEncryptionKey, recipientSigningKey, encryptionKeys, signingKeys, decodedOptions, this.config.apiUrl));

              case 4:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function writeNote(_x102, _x103, _x104, _x105) {
        return _writeNote2.apply(this, arguments);
      }

      return writeNote;
    }()
    /**
     * ReadNote makes call to TozStore to read note by noteId (uuid).
     *
     * @param {string} noteId  UUID assigned by TozStore, used to identify a note.
     *
     * @returns {Note} A note from TozStore unencrypted with the client's keys.
     */

  }, {
    key: "readNote",
    value: function () {
      var _readNote2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee36(noteId) {
        var encryptionKeys;
        return _regenerator["default"].wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                if (!(this.config.version === 1)) {
                  _context36.next = 2;
                  break;
                }

                throw new Error('Cannot read notes without a signing key!');

              case 2:
                encryptionKeys = new _types.KeyPair(this.config.publicKey, this.config.privateKey); // Use this.constructor to ensure we referencing the implementing class.

                return _context36.abrupt("return", this.constructor.internalReadNote(this.authenticator, noteId, encryptionKeys, this.config.apiUrl));

              case 4:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function readNote(_x106) {
        return _readNote2.apply(this, arguments);
      }

      return readNote;
    }()
    /**
     * ReadNoteByName makes call to TozStore to read note by user defined id_string.
     * Only premium notes can define this id string or name.
     *
     * @param {string} noteName  name given to this note with premium features
     *
     * @returns {Note} A note from TozStore unencrypted with the client's keys.
     */

  }, {
    key: "readNoteByName",
    value: function () {
      var _readNoteByName2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee37(noteName) {
        var encryptionKeys;
        return _regenerator["default"].wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                if (!(this.config.version === 1)) {
                  _context37.next = 2;
                  break;
                }

                throw new Error('Cannot read notes without a signing key!');

              case 2:
                encryptionKeys = new _types.KeyPair(this.config.publicKey, this.config.privateKey); // Use this.constructor to ensure we referencing the implementing class.

                return _context37.abrupt("return", this.constructor.internalReadNoteByName(this.authenticator, noteName, encryptionKeys, this.config.apiUrl));

              case 4:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function readNoteByName(_x107) {
        return _readNoteByName2.apply(this, arguments);
      }

      return readNoteByName;
    }()
    /**
     * DeleteNote deletes a note from TozStore based on the note identifier.
     *
     * @param {string} noteId  UUID assigned by TozStore, used to identify a note.
     */

  }, {
    key: "deleteNote",
    value: function () {
      var _deleteNote2 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee38(noteId) {
        return _regenerator["default"].wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                if (!(this.config.version === 1)) {
                  _context38.next = 2;
                  break;
                }

                throw new Error('Cannot delete notes without a signing key!');

              case 2:
                return _context38.abrupt("return", this.constructor.internalDeleteNote(this.authenticator, noteId, this.config.apiUrl));

              case 3:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function deleteNote(_x108) {
        return _deleteNote2.apply(this, arguments);
      }

      return deleteNote;
    }()
  }], [{
    key: "verify",
    value: function () {
      var _verify = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee39(signed, publicSignKey) {
        var verified;
        return _regenerator["default"].wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.crypto.verifyDocumentSignature(signed.document, signed.signature, publicSignKey);

              case 2:
                verified = _context39.sent;
                return _context39.abrupt("return", Promise.resolve(verified));

              case 4:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function verify(_x109, _x110) {
        return _verify.apply(this, arguments);
      }

      return verify;
    }()
  }]);
  return Client;
}(_cryptoConsumer["default"]);

exports["default"] = Client;