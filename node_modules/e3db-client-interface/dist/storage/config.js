/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _constants = require("../utils/constants");

/**
 * Configuration and credentials for E3DB.
 *
 * @property {number} version          The version number of the configuration format (currently 1)
 * @property {string} clientId         The client's unique client identifier
 * @property {string} apiKeyId         The client's non-secret API key component
 * @property {string} apiSecret        The client's confidential API key component
 * @property {string} publicKey        The client's Base64URL encoded Curve25519 public key
 * @property {string} privateKey       The client's Base64URL encoded Curve25519 private key
 * @property {string} [apiUrl]         Optional base URL for the E3DB API service
 * @property {string} [publicSigningKey]  The client's Base64URL encoded Ed25519 public key
 * @property {string} [privateSigningKey] The client's Base64URL encoded Ed25519 private key
 */
var Config =
/*#__PURE__*/
function () {
  (0, _createClass2["default"])(Config, null, [{
    key: "fromObject",
    value: function fromObject(obj) {
      if (typeof obj === 'string') {
        try {
          obj = JSON.parse(obj);
        } catch (err) {
          throw new Error('Config.fromObject param JSON string could not be parsed.');
        }
      }

      var apiUrl = obj.apiUrl || obj.api_url;
      var apiKeyId = obj.apiKeyId || obj.api_key_id;
      var apiSecret = obj.apiSecret || obj.api_secret;
      var clientId = obj.clientId || obj.client_id;
      var publicKey = obj.publicKey || obj.public_key;
      var privateKey = obj.privateKey || obj.private_key;
      var publicSigningKey = obj.publicSigningKey || obj.public_signing_key;
      var privateSigningKey = obj.privateSigningKey || obj.private_signing_key;
      return new Config(clientId, apiKeyId, apiSecret, publicKey, privateKey, apiUrl, publicSigningKey, privateSigningKey);
    }
  }]);

  function Config(clientId, apiKeyId, apiSecret, publicKey, privateKey) {
    var apiUrl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _constants.DEFAULT_API_URL;
    var publicSigningKey = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
    var privateSigningKey = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';
    (0, _classCallCheck2["default"])(this, Config);

    if (publicSigningKey === '' || privateSigningKey === '') {
      this.version = 1;
    } else {
      this.version = 2;
      this.publicSigningKey = publicSigningKey;
      this.privateSigningKey = privateSigningKey;
    }

    this.clientId = clientId;
    this.apiKeyId = apiKeyId;
    this.apiSecret = apiSecret;
    this.publicKey = publicKey;
    this.privateKey = privateKey;
    this.apiUrl = apiUrl;
  }

  (0, _createClass2["default"])(Config, [{
    key: "serialize",
    value: function serialize() {
      /* eslint-disable camelcase */
      return {
        version: this.version,
        api_url: this.apiUrl,
        api_key_id: this.apiKeyId,
        api_secret: this.apiSecret,
        client_id: this.clientId,
        public_key: this.publicKey,
        private_key: this.privateKey,
        public_signing_key: this.publicSigningKey,
        private_signing_key: this.privateSigningKey
        /* eslint-enable */

      };
    }
  }]);
  return Config;
}();

exports["default"] = Config;