/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _constants = require("../utils/constants");

/**
 * Configuration and credentials for E3DB.
 *
 * @property {string} realmId   The realm's unique identifier
 * @property {string} realmName The realm's globally unique name
 * @property {string} userId    The specific realm users unique identifier
 * @property {string} [apiUrl]  Optional base URL for the Tozny Platform API
 */
var Config =
/*#__PURE__*/
function () {
  (0, _createClass2["default"])(Config, null, [{
    key: "fromObject",

    /**
     * Create a new config object from a JSON string or JS object.
     *
     * If a string is passed, it is first parsed as JSON into an object.
     *
     * Camel case version of object keys are checked first. If the camel case version
     * of the configuration key is undefined, this method falls back to the snake case
     * version of the supported keys.
     *
     * @param {Object|string} obj A JSON string or javascript object containing identity configuration.
     *
     * @returns {Config} A new Config object based on the passed JS object or JSON string.
     */
    value: function fromObject(obj) {
      if (typeof obj === 'string') {
        try {
          obj = JSON.parse(obj);
        } catch (err) {
          throw new Error('Config.fromObject param JSON string could not be parsed.');
        }
      }

      var realmId = obj.realmId || obj.realm_id;
      var realmName = obj.realmName || obj.realm_name;
      var userId = obj.userId || obj.user_id;
      var apiUrl = obj.apiUrl || obj.api_url;
      return new this(realmId, realmName, userId, apiUrl);
    }
    /**
     * Create a new instance of Config
     *
     * @param {string} realmId   The realm's unique identifier
     * @param {string} realmName The realms globally unique name
     * @param {string} userId    A specific realm user's unique identifier
     * @param {string} [apiUrl]  Optional base URL for the Tozny Platform API
     *
     * @returns {Config} The constructed Config object.
     */

  }]);

  function Config(realmId, realmName, userId) {
    var apiUrl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _constants.DEFAULT_API_URL;
    (0, _classCallCheck2["default"])(this, Config);
    this.realmId = realmId;
    this.realmName = realmName;
    this.userId = userId;
    this.apiUrl = apiUrl;
  }
  /**
   * Creates a copy of the current configuration overriding values with the passed object.
   *
   * @param {Object} [overrides] An optional object overriding any specific configuration values.
   *
   * @returns {Config} A new instance of the Config object defined values overridden.
   */


  (0, _createClass2["default"])(Config, [{
    key: "clone",
    value: function clone() {
      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.constructor.fromObject(Object.assign(this, overrides));
    }
  }]);
  return Config;
}();

exports["default"] = Config;