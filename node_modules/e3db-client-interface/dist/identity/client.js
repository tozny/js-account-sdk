/*!
 * Tozny e3db
 *
 * LICENSE
 *
 * Tozny dual licenses this product. For commercial use, please contact
 * info@tozny.com. For non-commercial use, the contents of this file are
 * subject to the TOZNY NON-COMMERCIAL LICENSE (the "License") which
 * permits use of the software only by government agencies, schools,
 * universities, non-profit organizations or individuals on projects that
 * do not receive external funding other than government research grants
 * and contracts.  Any other use requires a commercial license. You may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at https://tozny.com/legal/non-commercial-license.
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License. Portions of the software are Copyright (c) TOZNY LLC, 2018-19.
 * All rights reserved.
 *
 * @copyright Copyright (c) 2018-19 Tozny, LLC (https://tozny.com)
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("../utils");

require("isomorphic-fetch");

function fetchToken(_x) {
  return _fetchToken.apply(this, arguments);
}

function _fetchToken() {
  _fetchToken = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(client) {
    var bodyData, request;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            /* eslint-disable camelcase */
            bodyData = {
              grant_type: 'password',
              client_id: 'admin-cli'
              /* eslint-enable */

            };
            _context4.next = 3;
            return client.storageClient.authenticator.tsv1Fetch(client.config.apiUrl + "/auth/realms/".concat(client.config.realmName, "/protocol/openid-connect/token"), {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: (0, _utils.urlEncodeData)(bodyData)
            });

          case 3:
            request = _context4.sent;
            return _context4.abrupt("return", (0, _utils.validateResponseAsJSON)(request));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _fetchToken.apply(this, arguments);
}

var Client =
/*#__PURE__*/
function () {
  function Client(config, storageClient, crypto) {
    (0, _classCallCheck2["default"])(this, Client);
    // Construct this object.
    this.config = config;
    this._storageClient = storageClient;
    this._crypto = crypto;
    this._tokenInfo = false;
  }

  (0, _createClass2["default"])(Client, [{
    key: "serialize",
    value: function serialize() {
      return {
        config: JSON.stringify(this.config),
        storageConfig: JSON.stringify(this.storageClient.config)
      };
    }
  }, {
    key: "token",
    value: function () {
      var _token = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var info;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.tokenInfo();

              case 2:
                info = _context.sent;
                return _context.abrupt("return", info.access_token);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function token() {
        return _token.apply(this, arguments);
      }

      return token;
    }()
  }, {
    key: "tokenInfo",
    value: function () {
      var _tokenInfo = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var fiveFromNow, _tokenInfo2;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fiveFromNow = Math.floor(Date.now() / 1000) + 5 * 60;

                if (!(!this._tokenInfo || this._tokenInfo.expires < fiveFromNow)) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 4;
                return fetchToken(this);

              case 4:
                _tokenInfo2 = _context2.sent;
                this._tokenInfo = _tokenInfo2;

              case 6:
                return _context2.abrupt("return", this._tokenInfo);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function tokenInfo() {
        return _tokenInfo.apply(this, arguments);
      }

      return tokenInfo;
    }()
  }, {
    key: "fetch",
    value: function (_fetch) {
      function fetch(_x2, _x3) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(url, options) {
        var token;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.token();

              case 2:
                token = _context3.sent;
                options.headers = options.headers || {};
                options.headers.Authorization = "Bearer ".concat(token);
                return _context3.abrupt("return", fetch(url, options));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x4, _x5) {
        return _ref.apply(this, arguments);
      };
    }())
  }, {
    key: "crypto",
    get: function get() {
      return this._crypto;
    }
  }, {
    key: "storageClient",
    get: function get() {
      return this._storageClient;
    }
  }]);
  return Client;
}();

exports["default"] = Client;